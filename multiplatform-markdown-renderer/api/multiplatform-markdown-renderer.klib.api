// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, js, macosArm64, macosX64, wasmJs]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <com.mikepenz:multiplatform-markdown-renderer>
abstract fun interface com.mikepenz.markdown.compose.extendedspans/SpanDrawInstructions { // com.mikepenz.markdown.compose.extendedspans/SpanDrawInstructions|null[0]
    abstract fun (androidx.compose.ui.graphics.drawscope/DrawScope).draw() // com.mikepenz.markdown.compose.extendedspans/SpanDrawInstructions.draw|draw@androidx.compose.ui.graphics.drawscope.DrawScope(){}[0]
}

abstract fun interface com.mikepenz.markdown.model/BulletHandler { // com.mikepenz.markdown.model/BulletHandler|null[0]
    abstract fun transform(org.intellij.markdown/IElementType, kotlin/CharSequence?, kotlin/Int, kotlin/Int, kotlin/Int): kotlin/String // com.mikepenz.markdown.model/BulletHandler.transform|transform(org.intellij.markdown.IElementType;kotlin.CharSequence?;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
}

abstract interface com.mikepenz.markdown.annotator/AnnotatorSettings { // com.mikepenz.markdown.annotator/AnnotatorSettings|null[0]
    abstract val annotator // com.mikepenz.markdown.annotator/AnnotatorSettings.annotator|{}annotator[0]
        abstract fun <get-annotator>(): com.mikepenz.markdown.model/MarkdownAnnotator // com.mikepenz.markdown.annotator/AnnotatorSettings.annotator.<get-annotator>|<get-annotator>(){}[0]
    abstract val codeSpanStyle // com.mikepenz.markdown.annotator/AnnotatorSettings.codeSpanStyle|{}codeSpanStyle[0]
        abstract fun <get-codeSpanStyle>(): androidx.compose.ui.text/SpanStyle // com.mikepenz.markdown.annotator/AnnotatorSettings.codeSpanStyle.<get-codeSpanStyle>|<get-codeSpanStyle>(){}[0]
    abstract val linkInteractionListener // com.mikepenz.markdown.annotator/AnnotatorSettings.linkInteractionListener|{}linkInteractionListener[0]
        abstract fun <get-linkInteractionListener>(): androidx.compose.ui.text/LinkInteractionListener? // com.mikepenz.markdown.annotator/AnnotatorSettings.linkInteractionListener.<get-linkInteractionListener>|<get-linkInteractionListener>(){}[0]
    abstract val linkTextSpanStyle // com.mikepenz.markdown.annotator/AnnotatorSettings.linkTextSpanStyle|{}linkTextSpanStyle[0]
        abstract fun <get-linkTextSpanStyle>(): androidx.compose.ui.text/TextLinkStyles // com.mikepenz.markdown.annotator/AnnotatorSettings.linkTextSpanStyle.<get-linkTextSpanStyle>|<get-linkTextSpanStyle>(){}[0]
    abstract val referenceLinkHandler // com.mikepenz.markdown.annotator/AnnotatorSettings.referenceLinkHandler|{}referenceLinkHandler[0]
        abstract fun <get-referenceLinkHandler>(): com.mikepenz.markdown.model/ReferenceLinkHandler? // com.mikepenz.markdown.annotator/AnnotatorSettings.referenceLinkHandler.<get-referenceLinkHandler>|<get-referenceLinkHandler>(){}[0]
}

abstract interface com.mikepenz.markdown.compose.components/MarkdownComponents { // com.mikepenz.markdown.compose.components/MarkdownComponents|null[0]
    abstract val blockQuote // com.mikepenz.markdown.compose.components/MarkdownComponents.blockQuote|{}blockQuote[0]
        abstract fun <get-blockQuote>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/MarkdownComponents.blockQuote.<get-blockQuote>|<get-blockQuote>(){}[0]
    abstract val checkbox // com.mikepenz.markdown.compose.components/MarkdownComponents.checkbox|{}checkbox[0]
        abstract fun <get-checkbox>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/MarkdownComponents.checkbox.<get-checkbox>|<get-checkbox>(){}[0]
    abstract val codeBlock // com.mikepenz.markdown.compose.components/MarkdownComponents.codeBlock|{}codeBlock[0]
        abstract fun <get-codeBlock>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/MarkdownComponents.codeBlock.<get-codeBlock>|<get-codeBlock>(){}[0]
    abstract val codeFence // com.mikepenz.markdown.compose.components/MarkdownComponents.codeFence|{}codeFence[0]
        abstract fun <get-codeFence>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/MarkdownComponents.codeFence.<get-codeFence>|<get-codeFence>(){}[0]
    abstract val custom // com.mikepenz.markdown.compose.components/MarkdownComponents.custom|{}custom[0]
        abstract fun <get-custom>(): kotlin/Function4<org.intellij.markdown/IElementType, com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>? // com.mikepenz.markdown.compose.components/MarkdownComponents.custom.<get-custom>|<get-custom>(){}[0]
    abstract val eol // com.mikepenz.markdown.compose.components/MarkdownComponents.eol|{}eol[0]
        abstract fun <get-eol>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/MarkdownComponents.eol.<get-eol>|<get-eol>(){}[0]
    abstract val heading1 // com.mikepenz.markdown.compose.components/MarkdownComponents.heading1|{}heading1[0]
        abstract fun <get-heading1>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/MarkdownComponents.heading1.<get-heading1>|<get-heading1>(){}[0]
    abstract val heading2 // com.mikepenz.markdown.compose.components/MarkdownComponents.heading2|{}heading2[0]
        abstract fun <get-heading2>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/MarkdownComponents.heading2.<get-heading2>|<get-heading2>(){}[0]
    abstract val heading3 // com.mikepenz.markdown.compose.components/MarkdownComponents.heading3|{}heading3[0]
        abstract fun <get-heading3>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/MarkdownComponents.heading3.<get-heading3>|<get-heading3>(){}[0]
    abstract val heading4 // com.mikepenz.markdown.compose.components/MarkdownComponents.heading4|{}heading4[0]
        abstract fun <get-heading4>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/MarkdownComponents.heading4.<get-heading4>|<get-heading4>(){}[0]
    abstract val heading5 // com.mikepenz.markdown.compose.components/MarkdownComponents.heading5|{}heading5[0]
        abstract fun <get-heading5>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/MarkdownComponents.heading5.<get-heading5>|<get-heading5>(){}[0]
    abstract val heading6 // com.mikepenz.markdown.compose.components/MarkdownComponents.heading6|{}heading6[0]
        abstract fun <get-heading6>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/MarkdownComponents.heading6.<get-heading6>|<get-heading6>(){}[0]
    abstract val horizontalRule // com.mikepenz.markdown.compose.components/MarkdownComponents.horizontalRule|{}horizontalRule[0]
        abstract fun <get-horizontalRule>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/MarkdownComponents.horizontalRule.<get-horizontalRule>|<get-horizontalRule>(){}[0]
    abstract val image // com.mikepenz.markdown.compose.components/MarkdownComponents.image|{}image[0]
        abstract fun <get-image>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/MarkdownComponents.image.<get-image>|<get-image>(){}[0]
    abstract val orderedList // com.mikepenz.markdown.compose.components/MarkdownComponents.orderedList|{}orderedList[0]
        abstract fun <get-orderedList>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/MarkdownComponents.orderedList.<get-orderedList>|<get-orderedList>(){}[0]
    abstract val paragraph // com.mikepenz.markdown.compose.components/MarkdownComponents.paragraph|{}paragraph[0]
        abstract fun <get-paragraph>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/MarkdownComponents.paragraph.<get-paragraph>|<get-paragraph>(){}[0]
    abstract val setextHeading1 // com.mikepenz.markdown.compose.components/MarkdownComponents.setextHeading1|{}setextHeading1[0]
        abstract fun <get-setextHeading1>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/MarkdownComponents.setextHeading1.<get-setextHeading1>|<get-setextHeading1>(){}[0]
    abstract val setextHeading2 // com.mikepenz.markdown.compose.components/MarkdownComponents.setextHeading2|{}setextHeading2[0]
        abstract fun <get-setextHeading2>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/MarkdownComponents.setextHeading2.<get-setextHeading2>|<get-setextHeading2>(){}[0]
    abstract val table // com.mikepenz.markdown.compose.components/MarkdownComponents.table|{}table[0]
        abstract fun <get-table>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/MarkdownComponents.table.<get-table>|<get-table>(){}[0]
    abstract val text // com.mikepenz.markdown.compose.components/MarkdownComponents.text|{}text[0]
        abstract fun <get-text>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/MarkdownComponents.text.<get-text>|<get-text>(){}[0]
    abstract val unorderedList // com.mikepenz.markdown.compose.components/MarkdownComponents.unorderedList|{}unorderedList[0]
        abstract fun <get-unorderedList>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/MarkdownComponents.unorderedList.<get-unorderedList>|<get-unorderedList>(){}[0]
}

abstract interface com.mikepenz.markdown.model/ImageTransformer { // com.mikepenz.markdown.model/ImageTransformer|null[0]
    abstract fun transform(kotlin/String, androidx.compose.runtime/Composer?, kotlin/Int): com.mikepenz.markdown.model/ImageData? // com.mikepenz.markdown.model/ImageTransformer.transform|transform(kotlin.String;androidx.compose.runtime.Composer?;kotlin.Int){}[0]
    open fun intrinsicSize(androidx.compose.ui.graphics.painter/Painter, androidx.compose.runtime/Composer?, kotlin/Int): androidx.compose.ui.geometry/Size // com.mikepenz.markdown.model/ImageTransformer.intrinsicSize|intrinsicSize(androidx.compose.ui.graphics.painter.Painter;androidx.compose.runtime.Composer?;kotlin.Int){}[0]
    open fun placeholderConfig(androidx.compose.ui.unit/Density, androidx.compose.ui.geometry/Size, androidx.compose.ui.geometry/Size): com.mikepenz.markdown.model/PlaceholderConfig // com.mikepenz.markdown.model/ImageTransformer.placeholderConfig|placeholderConfig(androidx.compose.ui.unit.Density;androidx.compose.ui.geometry.Size;androidx.compose.ui.geometry.Size){}[0]
}

abstract interface com.mikepenz.markdown.model/MarkdownAnimations { // com.mikepenz.markdown.model/MarkdownAnimations|null[0]
    abstract val animateTextSize // com.mikepenz.markdown.model/MarkdownAnimations.animateTextSize|{}animateTextSize[0]
        abstract fun <get-animateTextSize>(): kotlin/Function1<androidx.compose.ui/Modifier, androidx.compose.ui/Modifier> // com.mikepenz.markdown.model/MarkdownAnimations.animateTextSize.<get-animateTextSize>|<get-animateTextSize>(){}[0]
}

abstract interface com.mikepenz.markdown.model/MarkdownAnnotator { // com.mikepenz.markdown.model/MarkdownAnnotator|null[0]
    abstract val annotate // com.mikepenz.markdown.model/MarkdownAnnotator.annotate|{}annotate[0]
        abstract fun <get-annotate>(): kotlin/Function3<androidx.compose.ui.text/AnnotatedString.Builder, kotlin/String, org.intellij.markdown.ast/ASTNode, kotlin/Boolean>? // com.mikepenz.markdown.model/MarkdownAnnotator.annotate.<get-annotate>|<get-annotate>(){}[0]
    abstract val config // com.mikepenz.markdown.model/MarkdownAnnotator.config|{}config[0]
        abstract fun <get-config>(): com.mikepenz.markdown.model/MarkdownAnnotatorConfig // com.mikepenz.markdown.model/MarkdownAnnotator.config.<get-config>|<get-config>(){}[0]
}

abstract interface com.mikepenz.markdown.model/MarkdownAnnotatorConfig { // com.mikepenz.markdown.model/MarkdownAnnotatorConfig|null[0]
    abstract val eolAsNewLine // com.mikepenz.markdown.model/MarkdownAnnotatorConfig.eolAsNewLine|{}eolAsNewLine[0]
        abstract fun <get-eolAsNewLine>(): kotlin/Boolean // com.mikepenz.markdown.model/MarkdownAnnotatorConfig.eolAsNewLine.<get-eolAsNewLine>|<get-eolAsNewLine>(){}[0]
}

abstract interface com.mikepenz.markdown.model/MarkdownColors { // com.mikepenz.markdown.model/MarkdownColors|null[0]
    abstract val codeBackground // com.mikepenz.markdown.model/MarkdownColors.codeBackground|{}codeBackground[0]
        abstract fun <get-codeBackground>(): androidx.compose.ui.graphics/Color // com.mikepenz.markdown.model/MarkdownColors.codeBackground.<get-codeBackground>|<get-codeBackground>(){}[0]
    abstract val dividerColor // com.mikepenz.markdown.model/MarkdownColors.dividerColor|{}dividerColor[0]
        abstract fun <get-dividerColor>(): androidx.compose.ui.graphics/Color // com.mikepenz.markdown.model/MarkdownColors.dividerColor.<get-dividerColor>|<get-dividerColor>(){}[0]
    abstract val inlineCodeBackground // com.mikepenz.markdown.model/MarkdownColors.inlineCodeBackground|{}inlineCodeBackground[0]
        abstract fun <get-inlineCodeBackground>(): androidx.compose.ui.graphics/Color // com.mikepenz.markdown.model/MarkdownColors.inlineCodeBackground.<get-inlineCodeBackground>|<get-inlineCodeBackground>(){}[0]
    abstract val tableBackground // com.mikepenz.markdown.model/MarkdownColors.tableBackground|{}tableBackground[0]
        abstract fun <get-tableBackground>(): androidx.compose.ui.graphics/Color // com.mikepenz.markdown.model/MarkdownColors.tableBackground.<get-tableBackground>|<get-tableBackground>(){}[0]
    abstract val text // com.mikepenz.markdown.model/MarkdownColors.text|{}text[0]
        abstract fun <get-text>(): androidx.compose.ui.graphics/Color // com.mikepenz.markdown.model/MarkdownColors.text.<get-text>|<get-text>(){}[0]
}

abstract interface com.mikepenz.markdown.model/MarkdownDimens { // com.mikepenz.markdown.model/MarkdownDimens|null[0]
    abstract val blockQuoteThickness // com.mikepenz.markdown.model/MarkdownDimens.blockQuoteThickness|{}blockQuoteThickness[0]
        abstract fun <get-blockQuoteThickness>(): androidx.compose.ui.unit/Dp // com.mikepenz.markdown.model/MarkdownDimens.blockQuoteThickness.<get-blockQuoteThickness>|<get-blockQuoteThickness>(){}[0]
    abstract val codeBackgroundCornerSize // com.mikepenz.markdown.model/MarkdownDimens.codeBackgroundCornerSize|{}codeBackgroundCornerSize[0]
        abstract fun <get-codeBackgroundCornerSize>(): androidx.compose.ui.unit/Dp // com.mikepenz.markdown.model/MarkdownDimens.codeBackgroundCornerSize.<get-codeBackgroundCornerSize>|<get-codeBackgroundCornerSize>(){}[0]
    abstract val dividerThickness // com.mikepenz.markdown.model/MarkdownDimens.dividerThickness|{}dividerThickness[0]
        abstract fun <get-dividerThickness>(): androidx.compose.ui.unit/Dp // com.mikepenz.markdown.model/MarkdownDimens.dividerThickness.<get-dividerThickness>|<get-dividerThickness>(){}[0]
    abstract val tableCellPadding // com.mikepenz.markdown.model/MarkdownDimens.tableCellPadding|{}tableCellPadding[0]
        abstract fun <get-tableCellPadding>(): androidx.compose.ui.unit/Dp // com.mikepenz.markdown.model/MarkdownDimens.tableCellPadding.<get-tableCellPadding>|<get-tableCellPadding>(){}[0]
    abstract val tableCellWidth // com.mikepenz.markdown.model/MarkdownDimens.tableCellWidth|{}tableCellWidth[0]
        abstract fun <get-tableCellWidth>(): androidx.compose.ui.unit/Dp // com.mikepenz.markdown.model/MarkdownDimens.tableCellWidth.<get-tableCellWidth>|<get-tableCellWidth>(){}[0]
    abstract val tableCornerSize // com.mikepenz.markdown.model/MarkdownDimens.tableCornerSize|{}tableCornerSize[0]
        abstract fun <get-tableCornerSize>(): androidx.compose.ui.unit/Dp // com.mikepenz.markdown.model/MarkdownDimens.tableCornerSize.<get-tableCornerSize>|<get-tableCornerSize>(){}[0]
    abstract val tableMaxWidth // com.mikepenz.markdown.model/MarkdownDimens.tableMaxWidth|{}tableMaxWidth[0]
        abstract fun <get-tableMaxWidth>(): androidx.compose.ui.unit/Dp // com.mikepenz.markdown.model/MarkdownDimens.tableMaxWidth.<get-tableMaxWidth>|<get-tableMaxWidth>(){}[0]
}

abstract interface com.mikepenz.markdown.model/MarkdownExtendedSpans { // com.mikepenz.markdown.model/MarkdownExtendedSpans|null[0]
    abstract val extendedSpans // com.mikepenz.markdown.model/MarkdownExtendedSpans.extendedSpans|{}extendedSpans[0]
        abstract fun <get-extendedSpans>(): kotlin/Function2<androidx.compose.runtime/Composer, kotlin/Int, com.mikepenz.markdown.compose.extendedspans/ExtendedSpans>? // com.mikepenz.markdown.model/MarkdownExtendedSpans.extendedSpans.<get-extendedSpans>|<get-extendedSpans>(){}[0]
}

abstract interface com.mikepenz.markdown.model/MarkdownImageState { // com.mikepenz.markdown.model/MarkdownImageState|null[0]
    abstract val containerSize // com.mikepenz.markdown.model/MarkdownImageState.containerSize|{}containerSize[0]
        abstract fun <get-containerSize>(): androidx.compose.ui.geometry/Size // com.mikepenz.markdown.model/MarkdownImageState.containerSize.<get-containerSize>|<get-containerSize>(){}[0]
    abstract val density // com.mikepenz.markdown.model/MarkdownImageState.density|{}density[0]
        abstract fun <get-density>(): androidx.compose.ui.unit/Density // com.mikepenz.markdown.model/MarkdownImageState.density.<get-density>|<get-density>(){}[0]
    abstract val intrinsicImageSize // com.mikepenz.markdown.model/MarkdownImageState.intrinsicImageSize|{}intrinsicImageSize[0]
        abstract fun <get-intrinsicImageSize>(): androidx.compose.ui.geometry/Size // com.mikepenz.markdown.model/MarkdownImageState.intrinsicImageSize.<get-intrinsicImageSize>|<get-intrinsicImageSize>(){}[0]

    abstract fun updateContainerSize(androidx.compose.ui.geometry/Size) // com.mikepenz.markdown.model/MarkdownImageState.updateContainerSize|updateContainerSize(androidx.compose.ui.geometry.Size){}[0]
    abstract fun updateImageSize(androidx.compose.ui.geometry/Size) // com.mikepenz.markdown.model/MarkdownImageState.updateImageSize|updateImageSize(androidx.compose.ui.geometry.Size){}[0]
}

abstract interface com.mikepenz.markdown.model/MarkdownInlineContent { // com.mikepenz.markdown.model/MarkdownInlineContent|null[0]
    abstract val inlineContent // com.mikepenz.markdown.model/MarkdownInlineContent.inlineContent|{}inlineContent[0]
        abstract fun <get-inlineContent>(): kotlin.collections/Map<kotlin/String, androidx.compose.foundation.text/InlineTextContent> // com.mikepenz.markdown.model/MarkdownInlineContent.inlineContent.<get-inlineContent>|<get-inlineContent>(){}[0]
}

abstract interface com.mikepenz.markdown.model/MarkdownPadding { // com.mikepenz.markdown.model/MarkdownPadding|null[0]
    abstract val block // com.mikepenz.markdown.model/MarkdownPadding.block|{}block[0]
        abstract fun <get-block>(): androidx.compose.ui.unit/Dp // com.mikepenz.markdown.model/MarkdownPadding.block.<get-block>|<get-block>(){}[0]
    abstract val blockQuote // com.mikepenz.markdown.model/MarkdownPadding.blockQuote|{}blockQuote[0]
        abstract fun <get-blockQuote>(): androidx.compose.foundation.layout/PaddingValues // com.mikepenz.markdown.model/MarkdownPadding.blockQuote.<get-blockQuote>|<get-blockQuote>(){}[0]
    abstract val blockQuoteBar // com.mikepenz.markdown.model/MarkdownPadding.blockQuoteBar|{}blockQuoteBar[0]
        abstract fun <get-blockQuoteBar>(): androidx.compose.foundation.layout/PaddingValues.Absolute // com.mikepenz.markdown.model/MarkdownPadding.blockQuoteBar.<get-blockQuoteBar>|<get-blockQuoteBar>(){}[0]
    abstract val blockQuoteText // com.mikepenz.markdown.model/MarkdownPadding.blockQuoteText|{}blockQuoteText[0]
        abstract fun <get-blockQuoteText>(): androidx.compose.foundation.layout/PaddingValues // com.mikepenz.markdown.model/MarkdownPadding.blockQuoteText.<get-blockQuoteText>|<get-blockQuoteText>(){}[0]
    abstract val codeBlock // com.mikepenz.markdown.model/MarkdownPadding.codeBlock|{}codeBlock[0]
        abstract fun <get-codeBlock>(): androidx.compose.foundation.layout/PaddingValues // com.mikepenz.markdown.model/MarkdownPadding.codeBlock.<get-codeBlock>|<get-codeBlock>(){}[0]
    abstract val list // com.mikepenz.markdown.model/MarkdownPadding.list|{}list[0]
        abstract fun <get-list>(): androidx.compose.ui.unit/Dp // com.mikepenz.markdown.model/MarkdownPadding.list.<get-list>|<get-list>(){}[0]
    abstract val listIndent // com.mikepenz.markdown.model/MarkdownPadding.listIndent|{}listIndent[0]
        abstract fun <get-listIndent>(): androidx.compose.ui.unit/Dp // com.mikepenz.markdown.model/MarkdownPadding.listIndent.<get-listIndent>|<get-listIndent>(){}[0]
    abstract val listItemBottom // com.mikepenz.markdown.model/MarkdownPadding.listItemBottom|{}listItemBottom[0]
        abstract fun <get-listItemBottom>(): androidx.compose.ui.unit/Dp // com.mikepenz.markdown.model/MarkdownPadding.listItemBottom.<get-listItemBottom>|<get-listItemBottom>(){}[0]
    abstract val listItemTop // com.mikepenz.markdown.model/MarkdownPadding.listItemTop|{}listItemTop[0]
        abstract fun <get-listItemTop>(): androidx.compose.ui.unit/Dp // com.mikepenz.markdown.model/MarkdownPadding.listItemTop.<get-listItemTop>|<get-listItemTop>(){}[0]
}

abstract interface com.mikepenz.markdown.model/MarkdownState { // com.mikepenz.markdown.model/MarkdownState|null[0]
    abstract val links // com.mikepenz.markdown.model/MarkdownState.links|{}links[0]
        abstract fun <get-links>(): kotlinx.coroutines.flow/StateFlow<kotlin.collections/Map<kotlin/String, kotlin/String?>> // com.mikepenz.markdown.model/MarkdownState.links.<get-links>|<get-links>(){}[0]
    abstract val state // com.mikepenz.markdown.model/MarkdownState.state|{}state[0]
        abstract fun <get-state>(): kotlinx.coroutines.flow/StateFlow<com.mikepenz.markdown.model/State> // com.mikepenz.markdown.model/MarkdownState.state.<get-state>|<get-state>(){}[0]

    abstract suspend fun parse(): com.mikepenz.markdown.model/State // com.mikepenz.markdown.model/MarkdownState.parse|parse(){}[0]
}

abstract interface com.mikepenz.markdown.model/MarkdownTypography { // com.mikepenz.markdown.model/MarkdownTypography|null[0]
    abstract val bullet // com.mikepenz.markdown.model/MarkdownTypography.bullet|{}bullet[0]
        abstract fun <get-bullet>(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/MarkdownTypography.bullet.<get-bullet>|<get-bullet>(){}[0]
    abstract val code // com.mikepenz.markdown.model/MarkdownTypography.code|{}code[0]
        abstract fun <get-code>(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/MarkdownTypography.code.<get-code>|<get-code>(){}[0]
    abstract val h1 // com.mikepenz.markdown.model/MarkdownTypography.h1|{}h1[0]
        abstract fun <get-h1>(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/MarkdownTypography.h1.<get-h1>|<get-h1>(){}[0]
    abstract val h2 // com.mikepenz.markdown.model/MarkdownTypography.h2|{}h2[0]
        abstract fun <get-h2>(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/MarkdownTypography.h2.<get-h2>|<get-h2>(){}[0]
    abstract val h3 // com.mikepenz.markdown.model/MarkdownTypography.h3|{}h3[0]
        abstract fun <get-h3>(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/MarkdownTypography.h3.<get-h3>|<get-h3>(){}[0]
    abstract val h4 // com.mikepenz.markdown.model/MarkdownTypography.h4|{}h4[0]
        abstract fun <get-h4>(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/MarkdownTypography.h4.<get-h4>|<get-h4>(){}[0]
    abstract val h5 // com.mikepenz.markdown.model/MarkdownTypography.h5|{}h5[0]
        abstract fun <get-h5>(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/MarkdownTypography.h5.<get-h5>|<get-h5>(){}[0]
    abstract val h6 // com.mikepenz.markdown.model/MarkdownTypography.h6|{}h6[0]
        abstract fun <get-h6>(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/MarkdownTypography.h6.<get-h6>|<get-h6>(){}[0]
    abstract val inlineCode // com.mikepenz.markdown.model/MarkdownTypography.inlineCode|{}inlineCode[0]
        abstract fun <get-inlineCode>(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/MarkdownTypography.inlineCode.<get-inlineCode>|<get-inlineCode>(){}[0]
    abstract val list // com.mikepenz.markdown.model/MarkdownTypography.list|{}list[0]
        abstract fun <get-list>(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/MarkdownTypography.list.<get-list>|<get-list>(){}[0]
    abstract val ordered // com.mikepenz.markdown.model/MarkdownTypography.ordered|{}ordered[0]
        abstract fun <get-ordered>(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/MarkdownTypography.ordered.<get-ordered>|<get-ordered>(){}[0]
    abstract val paragraph // com.mikepenz.markdown.model/MarkdownTypography.paragraph|{}paragraph[0]
        abstract fun <get-paragraph>(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/MarkdownTypography.paragraph.<get-paragraph>|<get-paragraph>(){}[0]
    abstract val quote // com.mikepenz.markdown.model/MarkdownTypography.quote|{}quote[0]
        abstract fun <get-quote>(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/MarkdownTypography.quote.<get-quote>|<get-quote>(){}[0]
    abstract val table // com.mikepenz.markdown.model/MarkdownTypography.table|{}table[0]
        abstract fun <get-table>(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/MarkdownTypography.table.<get-table>|<get-table>(){}[0]
    abstract val text // com.mikepenz.markdown.model/MarkdownTypography.text|{}text[0]
        abstract fun <get-text>(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/MarkdownTypography.text.<get-text>|<get-text>(){}[0]
    abstract val textLink // com.mikepenz.markdown.model/MarkdownTypography.textLink|{}textLink[0]
        abstract fun <get-textLink>(): androidx.compose.ui.text/TextLinkStyles // com.mikepenz.markdown.model/MarkdownTypography.textLink.<get-textLink>|<get-textLink>(){}[0]
}

abstract interface com.mikepenz.markdown.model/ReferenceLinkHandler { // com.mikepenz.markdown.model/ReferenceLinkHandler|null[0]
    abstract fun find(kotlin/String): kotlin/String // com.mikepenz.markdown.model/ReferenceLinkHandler.find|find(kotlin.String){}[0]
    abstract fun store(kotlin/String, kotlin/String?) // com.mikepenz.markdown.model/ReferenceLinkHandler.store|store(kotlin.String;kotlin.String?){}[0]
}

sealed interface com.mikepenz.markdown.model/State { // com.mikepenz.markdown.model/State|null[0]
    abstract val referenceLinkHandler // com.mikepenz.markdown.model/State.referenceLinkHandler|{}referenceLinkHandler[0]
        abstract fun <get-referenceLinkHandler>(): com.mikepenz.markdown.model/ReferenceLinkHandler // com.mikepenz.markdown.model/State.referenceLinkHandler.<get-referenceLinkHandler>|<get-referenceLinkHandler>(){}[0]

    final class Error : com.mikepenz.markdown.model/State { // com.mikepenz.markdown.model/State.Error|null[0]
        constructor <init>(kotlin/Throwable, com.mikepenz.markdown.model/ReferenceLinkHandler = ...) // com.mikepenz.markdown.model/State.Error.<init>|<init>(kotlin.Throwable;com.mikepenz.markdown.model.ReferenceLinkHandler){}[0]

        final val referenceLinkHandler // com.mikepenz.markdown.model/State.Error.referenceLinkHandler|{}referenceLinkHandler[0]
            final fun <get-referenceLinkHandler>(): com.mikepenz.markdown.model/ReferenceLinkHandler // com.mikepenz.markdown.model/State.Error.referenceLinkHandler.<get-referenceLinkHandler>|<get-referenceLinkHandler>(){}[0]
        final val result // com.mikepenz.markdown.model/State.Error.result|{}result[0]
            final fun <get-result>(): kotlin/Throwable // com.mikepenz.markdown.model/State.Error.result.<get-result>|<get-result>(){}[0]

        final fun component1(): kotlin/Throwable // com.mikepenz.markdown.model/State.Error.component1|component1(){}[0]
        final fun component2(): com.mikepenz.markdown.model/ReferenceLinkHandler // com.mikepenz.markdown.model/State.Error.component2|component2(){}[0]
        final fun copy(kotlin/Throwable = ..., com.mikepenz.markdown.model/ReferenceLinkHandler = ...): com.mikepenz.markdown.model/State.Error // com.mikepenz.markdown.model/State.Error.copy|copy(kotlin.Throwable;com.mikepenz.markdown.model.ReferenceLinkHandler){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.mikepenz.markdown.model/State.Error.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.mikepenz.markdown.model/State.Error.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.mikepenz.markdown.model/State.Error.toString|toString(){}[0]
    }

    final class Loading : com.mikepenz.markdown.model/State { // com.mikepenz.markdown.model/State.Loading|null[0]
        constructor <init>(com.mikepenz.markdown.model/ReferenceLinkHandler = ...) // com.mikepenz.markdown.model/State.Loading.<init>|<init>(com.mikepenz.markdown.model.ReferenceLinkHandler){}[0]

        final val referenceLinkHandler // com.mikepenz.markdown.model/State.Loading.referenceLinkHandler|{}referenceLinkHandler[0]
            final fun <get-referenceLinkHandler>(): com.mikepenz.markdown.model/ReferenceLinkHandler // com.mikepenz.markdown.model/State.Loading.referenceLinkHandler.<get-referenceLinkHandler>|<get-referenceLinkHandler>(){}[0]

        final fun component1(): com.mikepenz.markdown.model/ReferenceLinkHandler // com.mikepenz.markdown.model/State.Loading.component1|component1(){}[0]
        final fun copy(com.mikepenz.markdown.model/ReferenceLinkHandler = ...): com.mikepenz.markdown.model/State.Loading // com.mikepenz.markdown.model/State.Loading.copy|copy(com.mikepenz.markdown.model.ReferenceLinkHandler){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.mikepenz.markdown.model/State.Loading.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.mikepenz.markdown.model/State.Loading.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.mikepenz.markdown.model/State.Loading.toString|toString(){}[0]
    }

    final class Success : com.mikepenz.markdown.model/State { // com.mikepenz.markdown.model/State.Success|null[0]
        constructor <init>(org.intellij.markdown.ast/ASTNode, kotlin/String, kotlin/Boolean, com.mikepenz.markdown.model/ReferenceLinkHandler = ...) // com.mikepenz.markdown.model/State.Success.<init>|<init>(org.intellij.markdown.ast.ASTNode;kotlin.String;kotlin.Boolean;com.mikepenz.markdown.model.ReferenceLinkHandler){}[0]

        final val content // com.mikepenz.markdown.model/State.Success.content|{}content[0]
            final fun <get-content>(): kotlin/String // com.mikepenz.markdown.model/State.Success.content.<get-content>|<get-content>(){}[0]
        final val linksLookedUp // com.mikepenz.markdown.model/State.Success.linksLookedUp|{}linksLookedUp[0]
            final fun <get-linksLookedUp>(): kotlin/Boolean // com.mikepenz.markdown.model/State.Success.linksLookedUp.<get-linksLookedUp>|<get-linksLookedUp>(){}[0]
        final val node // com.mikepenz.markdown.model/State.Success.node|{}node[0]
            final fun <get-node>(): org.intellij.markdown.ast/ASTNode // com.mikepenz.markdown.model/State.Success.node.<get-node>|<get-node>(){}[0]
        final val referenceLinkHandler // com.mikepenz.markdown.model/State.Success.referenceLinkHandler|{}referenceLinkHandler[0]
            final fun <get-referenceLinkHandler>(): com.mikepenz.markdown.model/ReferenceLinkHandler // com.mikepenz.markdown.model/State.Success.referenceLinkHandler.<get-referenceLinkHandler>|<get-referenceLinkHandler>(){}[0]

        final fun component1(): org.intellij.markdown.ast/ASTNode // com.mikepenz.markdown.model/State.Success.component1|component1(){}[0]
        final fun component2(): kotlin/String // com.mikepenz.markdown.model/State.Success.component2|component2(){}[0]
        final fun component3(): kotlin/Boolean // com.mikepenz.markdown.model/State.Success.component3|component3(){}[0]
        final fun component4(): com.mikepenz.markdown.model/ReferenceLinkHandler // com.mikepenz.markdown.model/State.Success.component4|component4(){}[0]
        final fun copy(org.intellij.markdown.ast/ASTNode = ..., kotlin/String = ..., kotlin/Boolean = ..., com.mikepenz.markdown.model/ReferenceLinkHandler = ...): com.mikepenz.markdown.model/State.Success // com.mikepenz.markdown.model/State.Success.copy|copy(org.intellij.markdown.ast.ASTNode;kotlin.String;kotlin.Boolean;com.mikepenz.markdown.model.ReferenceLinkHandler){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.mikepenz.markdown.model/State.Success.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.mikepenz.markdown.model/State.Success.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.mikepenz.markdown.model/State.Success.toString|toString(){}[0]
    }
}

abstract class com.mikepenz.markdown.compose.extendedspans/ExtendedSpanPainter { // com.mikepenz.markdown.compose.extendedspans/ExtendedSpanPainter|null[0]
    constructor <init>() // com.mikepenz.markdown.compose.extendedspans/ExtendedSpanPainter.<init>|<init>(){}[0]

    abstract fun decorate(androidx.compose.ui.text/LinkAnnotation, kotlin/Int, kotlin/Int, androidx.compose.ui.text/AnnotatedString, androidx.compose.ui.text/AnnotatedString.Builder): androidx.compose.ui.text/LinkAnnotation // com.mikepenz.markdown.compose.extendedspans/ExtendedSpanPainter.decorate|decorate(androidx.compose.ui.text.LinkAnnotation;kotlin.Int;kotlin.Int;androidx.compose.ui.text.AnnotatedString;androidx.compose.ui.text.AnnotatedString.Builder){}[0]
    abstract fun decorate(androidx.compose.ui.text/SpanStyle, kotlin/Int, kotlin/Int, androidx.compose.ui.text/AnnotatedString, androidx.compose.ui.text/AnnotatedString.Builder): androidx.compose.ui.text/SpanStyle // com.mikepenz.markdown.compose.extendedspans/ExtendedSpanPainter.decorate|decorate(androidx.compose.ui.text.SpanStyle;kotlin.Int;kotlin.Int;androidx.compose.ui.text.AnnotatedString;androidx.compose.ui.text.AnnotatedString.Builder){}[0]
    abstract fun drawInstructionsFor(androidx.compose.ui.text/TextLayoutResult, androidx.compose.ui.graphics/Color? = ...): com.mikepenz.markdown.compose.extendedspans/SpanDrawInstructions // com.mikepenz.markdown.compose.extendedspans/ExtendedSpanPainter.drawInstructionsFor|drawInstructionsFor(androidx.compose.ui.text.TextLayoutResult;androidx.compose.ui.graphics.Color?){}[0]
    final fun (androidx.compose.ui.text/TextLayoutResult).getBoundingBoxes(kotlin/Int, kotlin/Int, kotlin/Boolean = ...): kotlin.collections/List<androidx.compose.ui.geometry/Rect> // com.mikepenz.markdown.compose.extendedspans/ExtendedSpanPainter.getBoundingBoxes|getBoundingBoxes@androidx.compose.ui.text.TextLayoutResult(kotlin.Int;kotlin.Int;kotlin.Boolean){}[0]
}

final class com.mikepenz.markdown.annotator/DefaultAnnotatorSettings : com.mikepenz.markdown.annotator/AnnotatorSettings { // com.mikepenz.markdown.annotator/DefaultAnnotatorSettings|null[0]
    constructor <init>(androidx.compose.ui.text/TextLinkStyles, androidx.compose.ui.text/SpanStyle, com.mikepenz.markdown.model/MarkdownAnnotator, com.mikepenz.markdown.model/ReferenceLinkHandler? = ..., androidx.compose.ui.text/LinkInteractionListener? = ...) // com.mikepenz.markdown.annotator/DefaultAnnotatorSettings.<init>|<init>(androidx.compose.ui.text.TextLinkStyles;androidx.compose.ui.text.SpanStyle;com.mikepenz.markdown.model.MarkdownAnnotator;com.mikepenz.markdown.model.ReferenceLinkHandler?;androidx.compose.ui.text.LinkInteractionListener?){}[0]

    final val annotator // com.mikepenz.markdown.annotator/DefaultAnnotatorSettings.annotator|{}annotator[0]
        final fun <get-annotator>(): com.mikepenz.markdown.model/MarkdownAnnotator // com.mikepenz.markdown.annotator/DefaultAnnotatorSettings.annotator.<get-annotator>|<get-annotator>(){}[0]
    final val codeSpanStyle // com.mikepenz.markdown.annotator/DefaultAnnotatorSettings.codeSpanStyle|{}codeSpanStyle[0]
        final fun <get-codeSpanStyle>(): androidx.compose.ui.text/SpanStyle // com.mikepenz.markdown.annotator/DefaultAnnotatorSettings.codeSpanStyle.<get-codeSpanStyle>|<get-codeSpanStyle>(){}[0]
    final val linkInteractionListener // com.mikepenz.markdown.annotator/DefaultAnnotatorSettings.linkInteractionListener|{}linkInteractionListener[0]
        final fun <get-linkInteractionListener>(): androidx.compose.ui.text/LinkInteractionListener? // com.mikepenz.markdown.annotator/DefaultAnnotatorSettings.linkInteractionListener.<get-linkInteractionListener>|<get-linkInteractionListener>(){}[0]
    final val linkTextSpanStyle // com.mikepenz.markdown.annotator/DefaultAnnotatorSettings.linkTextSpanStyle|{}linkTextSpanStyle[0]
        final fun <get-linkTextSpanStyle>(): androidx.compose.ui.text/TextLinkStyles // com.mikepenz.markdown.annotator/DefaultAnnotatorSettings.linkTextSpanStyle.<get-linkTextSpanStyle>|<get-linkTextSpanStyle>(){}[0]
    final val referenceLinkHandler // com.mikepenz.markdown.annotator/DefaultAnnotatorSettings.referenceLinkHandler|{}referenceLinkHandler[0]
        final fun <get-referenceLinkHandler>(): com.mikepenz.markdown.model/ReferenceLinkHandler? // com.mikepenz.markdown.annotator/DefaultAnnotatorSettings.referenceLinkHandler.<get-referenceLinkHandler>|<get-referenceLinkHandler>(){}[0]
}

final class com.mikepenz.markdown.compose.components/MarkdownComponentModel { // com.mikepenz.markdown.compose.components/MarkdownComponentModel|null[0]
    constructor <init>(kotlin/String, org.intellij.markdown.ast/ASTNode, com.mikepenz.markdown.model/MarkdownTypography, kotlinx.collections.immutable/ImmutableMap<kotlin/String, kotlin/Any> = ...) // com.mikepenz.markdown.compose.components/MarkdownComponentModel.<init>|<init>(kotlin.String;org.intellij.markdown.ast.ASTNode;com.mikepenz.markdown.model.MarkdownTypography;kotlinx.collections.immutable.ImmutableMap<kotlin.String,kotlin.Any>){}[0]

    final val content // com.mikepenz.markdown.compose.components/MarkdownComponentModel.content|{}content[0]
        final fun <get-content>(): kotlin/String // com.mikepenz.markdown.compose.components/MarkdownComponentModel.content.<get-content>|<get-content>(){}[0]
    final val extra // com.mikepenz.markdown.compose.components/MarkdownComponentModel.extra|{}extra[0]
        final fun <get-extra>(): kotlinx.collections.immutable/ImmutableMap<kotlin/String, kotlin/Any> // com.mikepenz.markdown.compose.components/MarkdownComponentModel.extra.<get-extra>|<get-extra>(){}[0]
    final val node // com.mikepenz.markdown.compose.components/MarkdownComponentModel.node|{}node[0]
        final fun <get-node>(): org.intellij.markdown.ast/ASTNode // com.mikepenz.markdown.compose.components/MarkdownComponentModel.node.<get-node>|<get-node>(){}[0]
    final val typography // com.mikepenz.markdown.compose.components/MarkdownComponentModel.typography|{}typography[0]
        final fun <get-typography>(): com.mikepenz.markdown.model/MarkdownTypography // com.mikepenz.markdown.compose.components/MarkdownComponentModel.typography.<get-typography>|<get-typography>(){}[0]

    final fun component1(): kotlin/String // com.mikepenz.markdown.compose.components/MarkdownComponentModel.component1|component1(){}[0]
    final fun component2(): org.intellij.markdown.ast/ASTNode // com.mikepenz.markdown.compose.components/MarkdownComponentModel.component2|component2(){}[0]
    final fun component3(): com.mikepenz.markdown.model/MarkdownTypography // com.mikepenz.markdown.compose.components/MarkdownComponentModel.component3|component3(){}[0]
    final fun component4(): kotlinx.collections.immutable/ImmutableMap<kotlin/String, kotlin/Any> // com.mikepenz.markdown.compose.components/MarkdownComponentModel.component4|component4(){}[0]
    final fun copy(kotlin/String = ..., org.intellij.markdown.ast/ASTNode = ..., com.mikepenz.markdown.model/MarkdownTypography = ..., kotlinx.collections.immutable/ImmutableMap<kotlin/String, kotlin/Any> = ...): com.mikepenz.markdown.compose.components/MarkdownComponentModel // com.mikepenz.markdown.compose.components/MarkdownComponentModel.copy|copy(kotlin.String;org.intellij.markdown.ast.ASTNode;com.mikepenz.markdown.model.MarkdownTypography;kotlinx.collections.immutable.ImmutableMap<kotlin.String,kotlin.Any>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.mikepenz.markdown.compose.components/MarkdownComponentModel.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.mikepenz.markdown.compose.components/MarkdownComponentModel.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.mikepenz.markdown.compose.components/MarkdownComponentModel.toString|toString(){}[0]
}

final class com.mikepenz.markdown.compose.extendedspans/ExtendedSpans { // com.mikepenz.markdown.compose.extendedspans/ExtendedSpans|null[0]
    constructor <init>(kotlin/Array<out com.mikepenz.markdown.compose.extendedspans/ExtendedSpanPainter>...) // com.mikepenz.markdown.compose.extendedspans/ExtendedSpans.<init>|<init>(kotlin.Array<out|com.mikepenz.markdown.compose.extendedspans.ExtendedSpanPainter>...){}[0]

    final fun extend(androidx.compose.ui.text/AnnotatedString): androidx.compose.ui.text/AnnotatedString // com.mikepenz.markdown.compose.extendedspans/ExtendedSpans.extend|extend(androidx.compose.ui.text.AnnotatedString){}[0]
    final fun onTextLayout(androidx.compose.ui.text/TextLayoutResult, androidx.compose.ui.graphics/Color? = ...) // com.mikepenz.markdown.compose.extendedspans/ExtendedSpans.onTextLayout|onTextLayout(androidx.compose.ui.text.TextLayoutResult;androidx.compose.ui.graphics.Color?){}[0]

    final object Companion // com.mikepenz.markdown.compose.extendedspans/ExtendedSpans.Companion|null[0]
}

final class com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter : com.mikepenz.markdown.compose.extendedspans/ExtendedSpanPainter { // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter|null[0]
    constructor <init>(androidx.compose.ui.unit/TextUnit = ..., com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.Stroke? = ..., com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.TextPaddingValues = ..., androidx.compose.ui.unit/TextUnit = ..., androidx.compose.ui.unit/TextUnit = ...) // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.<init>|<init>(androidx.compose.ui.unit.TextUnit;com.mikepenz.markdown.compose.extendedspans.RoundedCornerSpanPainter.Stroke?;com.mikepenz.markdown.compose.extendedspans.RoundedCornerSpanPainter.TextPaddingValues;androidx.compose.ui.unit.TextUnit;androidx.compose.ui.unit.TextUnit){}[0]

    final fun decorate(androidx.compose.ui.text/LinkAnnotation, kotlin/Int, kotlin/Int, androidx.compose.ui.text/AnnotatedString, androidx.compose.ui.text/AnnotatedString.Builder): androidx.compose.ui.text/LinkAnnotation // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.decorate|decorate(androidx.compose.ui.text.LinkAnnotation;kotlin.Int;kotlin.Int;androidx.compose.ui.text.AnnotatedString;androidx.compose.ui.text.AnnotatedString.Builder){}[0]
    final fun decorate(androidx.compose.ui.text/SpanStyle, kotlin/Int, kotlin/Int, androidx.compose.ui.text/AnnotatedString, androidx.compose.ui.text/AnnotatedString.Builder): androidx.compose.ui.text/SpanStyle // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.decorate|decorate(androidx.compose.ui.text.SpanStyle;kotlin.Int;kotlin.Int;androidx.compose.ui.text.AnnotatedString;androidx.compose.ui.text.AnnotatedString.Builder){}[0]
    final fun drawInstructionsFor(androidx.compose.ui.text/TextLayoutResult, androidx.compose.ui.graphics/Color?): com.mikepenz.markdown.compose.extendedspans/SpanDrawInstructions // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.drawInstructionsFor|drawInstructionsFor(androidx.compose.ui.text.TextLayoutResult;androidx.compose.ui.graphics.Color?){}[0]

    final class Stroke { // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.Stroke|null[0]
        constructor <init>(androidx.compose.ui.graphics/Color, androidx.compose.ui.unit/TextUnit = ...) // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.Stroke.<init>|<init>(androidx.compose.ui.graphics.Color;androidx.compose.ui.unit.TextUnit){}[0]
        constructor <init>(kotlin/Function1<androidx.compose.ui.graphics/Color, androidx.compose.ui.graphics/Color>, androidx.compose.ui.unit/TextUnit = ...) // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.Stroke.<init>|<init>(kotlin.Function1<androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color>;androidx.compose.ui.unit.TextUnit){}[0]

        final val color // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.Stroke.color|{}color[0]
            final fun <get-color>(): kotlin/Function1<androidx.compose.ui.graphics/Color, androidx.compose.ui.graphics/Color> // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.Stroke.color.<get-color>|<get-color>(){}[0]
        final val width // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.Stroke.width|{}width[0]
            final fun <get-width>(): androidx.compose.ui.unit/TextUnit // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.Stroke.width.<get-width>|<get-width>(){}[0]

        final fun component1(): kotlin/Function1<androidx.compose.ui.graphics/Color, androidx.compose.ui.graphics/Color> // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.Stroke.component1|component1(){}[0]
        final fun component2(): androidx.compose.ui.unit/TextUnit // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.Stroke.component2|component2(){}[0]
        final fun copy(kotlin/Function1<androidx.compose.ui.graphics/Color, androidx.compose.ui.graphics/Color> = ..., androidx.compose.ui.unit/TextUnit = ...): com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.Stroke // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.Stroke.copy|copy(kotlin.Function1<androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color>;androidx.compose.ui.unit.TextUnit){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.Stroke.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.Stroke.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.Stroke.toString|toString(){}[0]
    }

    final class TextPaddingValues { // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.TextPaddingValues|null[0]
        constructor <init>(androidx.compose.ui.unit/TextUnit = ..., androidx.compose.ui.unit/TextUnit = ...) // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.TextPaddingValues.<init>|<init>(androidx.compose.ui.unit.TextUnit;androidx.compose.ui.unit.TextUnit){}[0]

        final val horizontal // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.TextPaddingValues.horizontal|{}horizontal[0]
            final fun <get-horizontal>(): androidx.compose.ui.unit/TextUnit // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.TextPaddingValues.horizontal.<get-horizontal>|<get-horizontal>(){}[0]
        final val vertical // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.TextPaddingValues.vertical|{}vertical[0]
            final fun <get-vertical>(): androidx.compose.ui.unit/TextUnit // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.TextPaddingValues.vertical.<get-vertical>|<get-vertical>(){}[0]

        final fun component1(): androidx.compose.ui.unit/TextUnit // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.TextPaddingValues.component1|component1(){}[0]
        final fun component2(): androidx.compose.ui.unit/TextUnit // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.TextPaddingValues.component2|component2(){}[0]
        final fun copy(androidx.compose.ui.unit/TextUnit = ..., androidx.compose.ui.unit/TextUnit = ...): com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.TextPaddingValues // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.TextPaddingValues.copy|copy(androidx.compose.ui.unit.TextUnit;androidx.compose.ui.unit.TextUnit){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.TextPaddingValues.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.TextPaddingValues.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.TextPaddingValues.toString|toString(){}[0]
    }

    final object Companion // com.mikepenz.markdown.compose.extendedspans/RoundedCornerSpanPainter.Companion|null[0]
}

final class com.mikepenz.markdown.compose.extendedspans/SquigglyUnderlineAnimator { // com.mikepenz.markdown.compose.extendedspans/SquigglyUnderlineAnimator|null[0]
    final object Companion { // com.mikepenz.markdown.compose.extendedspans/SquigglyUnderlineAnimator.Companion|null[0]
        final val NoOp // com.mikepenz.markdown.compose.extendedspans/SquigglyUnderlineAnimator.Companion.NoOp|{}NoOp[0]
            final fun <get-NoOp>(): com.mikepenz.markdown.compose.extendedspans/SquigglyUnderlineAnimator // com.mikepenz.markdown.compose.extendedspans/SquigglyUnderlineAnimator.Companion.NoOp.<get-NoOp>|<get-NoOp>(){}[0]
    }
}

final class com.mikepenz.markdown.compose.extendedspans/SquigglyUnderlineSpanPainter : com.mikepenz.markdown.compose.extendedspans/ExtendedSpanPainter { // com.mikepenz.markdown.compose.extendedspans/SquigglyUnderlineSpanPainter|null[0]
    constructor <init>(androidx.compose.ui.unit/TextUnit = ..., androidx.compose.ui.unit/TextUnit = ..., androidx.compose.ui.unit/TextUnit = ..., androidx.compose.ui.unit/TextUnit = ..., com.mikepenz.markdown.compose.extendedspans/SquigglyUnderlineAnimator = ...) // com.mikepenz.markdown.compose.extendedspans/SquigglyUnderlineSpanPainter.<init>|<init>(androidx.compose.ui.unit.TextUnit;androidx.compose.ui.unit.TextUnit;androidx.compose.ui.unit.TextUnit;androidx.compose.ui.unit.TextUnit;com.mikepenz.markdown.compose.extendedspans.SquigglyUnderlineAnimator){}[0]

    final fun decorate(androidx.compose.ui.text/LinkAnnotation, kotlin/Int, kotlin/Int, androidx.compose.ui.text/AnnotatedString, androidx.compose.ui.text/AnnotatedString.Builder): androidx.compose.ui.text/LinkAnnotation // com.mikepenz.markdown.compose.extendedspans/SquigglyUnderlineSpanPainter.decorate|decorate(androidx.compose.ui.text.LinkAnnotation;kotlin.Int;kotlin.Int;androidx.compose.ui.text.AnnotatedString;androidx.compose.ui.text.AnnotatedString.Builder){}[0]
    final fun decorate(androidx.compose.ui.text/SpanStyle, kotlin/Int, kotlin/Int, androidx.compose.ui.text/AnnotatedString, androidx.compose.ui.text/AnnotatedString.Builder): androidx.compose.ui.text/SpanStyle // com.mikepenz.markdown.compose.extendedspans/SquigglyUnderlineSpanPainter.decorate|decorate(androidx.compose.ui.text.SpanStyle;kotlin.Int;kotlin.Int;androidx.compose.ui.text.AnnotatedString;androidx.compose.ui.text.AnnotatedString.Builder){}[0]
    final fun drawInstructionsFor(androidx.compose.ui.text/TextLayoutResult, androidx.compose.ui.graphics/Color?): com.mikepenz.markdown.compose.extendedspans/SpanDrawInstructions // com.mikepenz.markdown.compose.extendedspans/SquigglyUnderlineSpanPainter.drawInstructionsFor|drawInstructionsFor(androidx.compose.ui.text.TextLayoutResult;androidx.compose.ui.graphics.Color?){}[0]

    final object Companion // com.mikepenz.markdown.compose.extendedspans/SquigglyUnderlineSpanPainter.Companion|null[0]
}

final class com.mikepenz.markdown.model/DefaultMarkdownAnimation : com.mikepenz.markdown.model/MarkdownAnimations { // com.mikepenz.markdown.model/DefaultMarkdownAnimation|null[0]
    constructor <init>(kotlin/Function1<androidx.compose.ui/Modifier, androidx.compose.ui/Modifier>) // com.mikepenz.markdown.model/DefaultMarkdownAnimation.<init>|<init>(kotlin.Function1<androidx.compose.ui.Modifier,androidx.compose.ui.Modifier>){}[0]

    final val animateTextSize // com.mikepenz.markdown.model/DefaultMarkdownAnimation.animateTextSize|{}animateTextSize[0]
        final fun <get-animateTextSize>(): kotlin/Function1<androidx.compose.ui/Modifier, androidx.compose.ui/Modifier> // com.mikepenz.markdown.model/DefaultMarkdownAnimation.animateTextSize.<get-animateTextSize>|<get-animateTextSize>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // com.mikepenz.markdown.model/DefaultMarkdownAnimation.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.mikepenz.markdown.model/DefaultMarkdownAnimation.hashCode|hashCode(){}[0]
}

final class com.mikepenz.markdown.model/DefaultMarkdownAnnotator : com.mikepenz.markdown.model/MarkdownAnnotator { // com.mikepenz.markdown.model/DefaultMarkdownAnnotator|null[0]
    constructor <init>(kotlin/Function3<androidx.compose.ui.text/AnnotatedString.Builder, kotlin/String, org.intellij.markdown.ast/ASTNode, kotlin/Boolean>?, com.mikepenz.markdown.model/MarkdownAnnotatorConfig) // com.mikepenz.markdown.model/DefaultMarkdownAnnotator.<init>|<init>(kotlin.Function3<androidx.compose.ui.text.AnnotatedString.Builder,kotlin.String,org.intellij.markdown.ast.ASTNode,kotlin.Boolean>?;com.mikepenz.markdown.model.MarkdownAnnotatorConfig){}[0]

    final val annotate // com.mikepenz.markdown.model/DefaultMarkdownAnnotator.annotate|{}annotate[0]
        final fun <get-annotate>(): kotlin/Function3<androidx.compose.ui.text/AnnotatedString.Builder, kotlin/String, org.intellij.markdown.ast/ASTNode, kotlin/Boolean>? // com.mikepenz.markdown.model/DefaultMarkdownAnnotator.annotate.<get-annotate>|<get-annotate>(){}[0]
    final val config // com.mikepenz.markdown.model/DefaultMarkdownAnnotator.config|{}config[0]
        final fun <get-config>(): com.mikepenz.markdown.model/MarkdownAnnotatorConfig // com.mikepenz.markdown.model/DefaultMarkdownAnnotator.config.<get-config>|<get-config>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // com.mikepenz.markdown.model/DefaultMarkdownAnnotator.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.mikepenz.markdown.model/DefaultMarkdownAnnotator.hashCode|hashCode(){}[0]
}

final class com.mikepenz.markdown.model/DefaultMarkdownAnnotatorConfig : com.mikepenz.markdown.model/MarkdownAnnotatorConfig { // com.mikepenz.markdown.model/DefaultMarkdownAnnotatorConfig|null[0]
    constructor <init>(kotlin/Boolean = ...) // com.mikepenz.markdown.model/DefaultMarkdownAnnotatorConfig.<init>|<init>(kotlin.Boolean){}[0]

    final val eolAsNewLine // com.mikepenz.markdown.model/DefaultMarkdownAnnotatorConfig.eolAsNewLine|{}eolAsNewLine[0]
        final fun <get-eolAsNewLine>(): kotlin/Boolean // com.mikepenz.markdown.model/DefaultMarkdownAnnotatorConfig.eolAsNewLine.<get-eolAsNewLine>|<get-eolAsNewLine>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // com.mikepenz.markdown.model/DefaultMarkdownAnnotatorConfig.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.mikepenz.markdown.model/DefaultMarkdownAnnotatorConfig.hashCode|hashCode(){}[0]
}

final class com.mikepenz.markdown.model/DefaultMarkdownColors : com.mikepenz.markdown.model/MarkdownColors { // com.mikepenz.markdown.model/DefaultMarkdownColors|null[0]
    constructor <init>(androidx.compose.ui.graphics/Color, androidx.compose.ui.graphics/Color, androidx.compose.ui.graphics/Color, androidx.compose.ui.graphics/Color, androidx.compose.ui.graphics/Color) // com.mikepenz.markdown.model/DefaultMarkdownColors.<init>|<init>(androidx.compose.ui.graphics.Color;androidx.compose.ui.graphics.Color;androidx.compose.ui.graphics.Color;androidx.compose.ui.graphics.Color;androidx.compose.ui.graphics.Color){}[0]

    final val codeBackground // com.mikepenz.markdown.model/DefaultMarkdownColors.codeBackground|{}codeBackground[0]
        final fun <get-codeBackground>(): androidx.compose.ui.graphics/Color // com.mikepenz.markdown.model/DefaultMarkdownColors.codeBackground.<get-codeBackground>|<get-codeBackground>(){}[0]
    final val dividerColor // com.mikepenz.markdown.model/DefaultMarkdownColors.dividerColor|{}dividerColor[0]
        final fun <get-dividerColor>(): androidx.compose.ui.graphics/Color // com.mikepenz.markdown.model/DefaultMarkdownColors.dividerColor.<get-dividerColor>|<get-dividerColor>(){}[0]
    final val inlineCodeBackground // com.mikepenz.markdown.model/DefaultMarkdownColors.inlineCodeBackground|{}inlineCodeBackground[0]
        final fun <get-inlineCodeBackground>(): androidx.compose.ui.graphics/Color // com.mikepenz.markdown.model/DefaultMarkdownColors.inlineCodeBackground.<get-inlineCodeBackground>|<get-inlineCodeBackground>(){}[0]
    final val tableBackground // com.mikepenz.markdown.model/DefaultMarkdownColors.tableBackground|{}tableBackground[0]
        final fun <get-tableBackground>(): androidx.compose.ui.graphics/Color // com.mikepenz.markdown.model/DefaultMarkdownColors.tableBackground.<get-tableBackground>|<get-tableBackground>(){}[0]
    final val text // com.mikepenz.markdown.model/DefaultMarkdownColors.text|{}text[0]
        final fun <get-text>(): androidx.compose.ui.graphics/Color // com.mikepenz.markdown.model/DefaultMarkdownColors.text.<get-text>|<get-text>(){}[0]

    final fun component1(): androidx.compose.ui.graphics/Color // com.mikepenz.markdown.model/DefaultMarkdownColors.component1|component1(){}[0]
    final fun component2(): androidx.compose.ui.graphics/Color // com.mikepenz.markdown.model/DefaultMarkdownColors.component2|component2(){}[0]
    final fun component3(): androidx.compose.ui.graphics/Color // com.mikepenz.markdown.model/DefaultMarkdownColors.component3|component3(){}[0]
    final fun component4(): androidx.compose.ui.graphics/Color // com.mikepenz.markdown.model/DefaultMarkdownColors.component4|component4(){}[0]
    final fun component5(): androidx.compose.ui.graphics/Color // com.mikepenz.markdown.model/DefaultMarkdownColors.component5|component5(){}[0]
    final fun copy(androidx.compose.ui.graphics/Color = ..., androidx.compose.ui.graphics/Color = ..., androidx.compose.ui.graphics/Color = ..., androidx.compose.ui.graphics/Color = ..., androidx.compose.ui.graphics/Color = ...): com.mikepenz.markdown.model/DefaultMarkdownColors // com.mikepenz.markdown.model/DefaultMarkdownColors.copy|copy(androidx.compose.ui.graphics.Color;androidx.compose.ui.graphics.Color;androidx.compose.ui.graphics.Color;androidx.compose.ui.graphics.Color;androidx.compose.ui.graphics.Color){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.mikepenz.markdown.model/DefaultMarkdownColors.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.mikepenz.markdown.model/DefaultMarkdownColors.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.mikepenz.markdown.model/DefaultMarkdownColors.toString|toString(){}[0]
}

final class com.mikepenz.markdown.model/DefaultMarkdownExtendedSpans : com.mikepenz.markdown.model/MarkdownExtendedSpans { // com.mikepenz.markdown.model/DefaultMarkdownExtendedSpans|null[0]
    constructor <init>(kotlin/Function2<androidx.compose.runtime/Composer, kotlin/Int, com.mikepenz.markdown.compose.extendedspans/ExtendedSpans>?) // com.mikepenz.markdown.model/DefaultMarkdownExtendedSpans.<init>|<init>(kotlin.Function2<androidx.compose.runtime.Composer,kotlin.Int,com.mikepenz.markdown.compose.extendedspans.ExtendedSpans>?){}[0]

    final val extendedSpans // com.mikepenz.markdown.model/DefaultMarkdownExtendedSpans.extendedSpans|{}extendedSpans[0]
        final fun <get-extendedSpans>(): kotlin/Function2<androidx.compose.runtime/Composer, kotlin/Int, com.mikepenz.markdown.compose.extendedspans/ExtendedSpans>? // com.mikepenz.markdown.model/DefaultMarkdownExtendedSpans.extendedSpans.<get-extendedSpans>|<get-extendedSpans>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // com.mikepenz.markdown.model/DefaultMarkdownExtendedSpans.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.mikepenz.markdown.model/DefaultMarkdownExtendedSpans.hashCode|hashCode(){}[0]
}

final class com.mikepenz.markdown.model/DefaultMarkdownInlineContent : com.mikepenz.markdown.model/MarkdownInlineContent { // com.mikepenz.markdown.model/DefaultMarkdownInlineContent|null[0]
    constructor <init>(kotlin.collections/Map<kotlin/String, androidx.compose.foundation.text/InlineTextContent>) // com.mikepenz.markdown.model/DefaultMarkdownInlineContent.<init>|<init>(kotlin.collections.Map<kotlin.String,androidx.compose.foundation.text.InlineTextContent>){}[0]

    final val inlineContent // com.mikepenz.markdown.model/DefaultMarkdownInlineContent.inlineContent|{}inlineContent[0]
        final fun <get-inlineContent>(): kotlin.collections/Map<kotlin/String, androidx.compose.foundation.text/InlineTextContent> // com.mikepenz.markdown.model/DefaultMarkdownInlineContent.inlineContent.<get-inlineContent>|<get-inlineContent>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // com.mikepenz.markdown.model/DefaultMarkdownInlineContent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.mikepenz.markdown.model/DefaultMarkdownInlineContent.hashCode|hashCode(){}[0]
}

final class com.mikepenz.markdown.model/DefaultMarkdownTypography : com.mikepenz.markdown.model/MarkdownTypography { // com.mikepenz.markdown.model/DefaultMarkdownTypography|null[0]
    constructor <init>(androidx.compose.ui.text/TextStyle, androidx.compose.ui.text/TextStyle, androidx.compose.ui.text/TextStyle, androidx.compose.ui.text/TextStyle, androidx.compose.ui.text/TextStyle, androidx.compose.ui.text/TextStyle, androidx.compose.ui.text/TextStyle, androidx.compose.ui.text/TextStyle, androidx.compose.ui.text/TextStyle, androidx.compose.ui.text/TextStyle, androidx.compose.ui.text/TextStyle, androidx.compose.ui.text/TextStyle, androidx.compose.ui.text/TextStyle, androidx.compose.ui.text/TextStyle, androidx.compose.ui.text/TextLinkStyles, androidx.compose.ui.text/TextStyle) // com.mikepenz.markdown.model/DefaultMarkdownTypography.<init>|<init>(androidx.compose.ui.text.TextStyle;androidx.compose.ui.text.TextStyle;androidx.compose.ui.text.TextStyle;androidx.compose.ui.text.TextStyle;androidx.compose.ui.text.TextStyle;androidx.compose.ui.text.TextStyle;androidx.compose.ui.text.TextStyle;androidx.compose.ui.text.TextStyle;androidx.compose.ui.text.TextStyle;androidx.compose.ui.text.TextStyle;androidx.compose.ui.text.TextStyle;androidx.compose.ui.text.TextStyle;androidx.compose.ui.text.TextStyle;androidx.compose.ui.text.TextStyle;androidx.compose.ui.text.TextLinkStyles;androidx.compose.ui.text.TextStyle){}[0]

    final val bullet // com.mikepenz.markdown.model/DefaultMarkdownTypography.bullet|{}bullet[0]
        final fun <get-bullet>(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/DefaultMarkdownTypography.bullet.<get-bullet>|<get-bullet>(){}[0]
    final val code // com.mikepenz.markdown.model/DefaultMarkdownTypography.code|{}code[0]
        final fun <get-code>(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/DefaultMarkdownTypography.code.<get-code>|<get-code>(){}[0]
    final val h1 // com.mikepenz.markdown.model/DefaultMarkdownTypography.h1|{}h1[0]
        final fun <get-h1>(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/DefaultMarkdownTypography.h1.<get-h1>|<get-h1>(){}[0]
    final val h2 // com.mikepenz.markdown.model/DefaultMarkdownTypography.h2|{}h2[0]
        final fun <get-h2>(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/DefaultMarkdownTypography.h2.<get-h2>|<get-h2>(){}[0]
    final val h3 // com.mikepenz.markdown.model/DefaultMarkdownTypography.h3|{}h3[0]
        final fun <get-h3>(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/DefaultMarkdownTypography.h3.<get-h3>|<get-h3>(){}[0]
    final val h4 // com.mikepenz.markdown.model/DefaultMarkdownTypography.h4|{}h4[0]
        final fun <get-h4>(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/DefaultMarkdownTypography.h4.<get-h4>|<get-h4>(){}[0]
    final val h5 // com.mikepenz.markdown.model/DefaultMarkdownTypography.h5|{}h5[0]
        final fun <get-h5>(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/DefaultMarkdownTypography.h5.<get-h5>|<get-h5>(){}[0]
    final val h6 // com.mikepenz.markdown.model/DefaultMarkdownTypography.h6|{}h6[0]
        final fun <get-h6>(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/DefaultMarkdownTypography.h6.<get-h6>|<get-h6>(){}[0]
    final val inlineCode // com.mikepenz.markdown.model/DefaultMarkdownTypography.inlineCode|{}inlineCode[0]
        final fun <get-inlineCode>(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/DefaultMarkdownTypography.inlineCode.<get-inlineCode>|<get-inlineCode>(){}[0]
    final val list // com.mikepenz.markdown.model/DefaultMarkdownTypography.list|{}list[0]
        final fun <get-list>(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/DefaultMarkdownTypography.list.<get-list>|<get-list>(){}[0]
    final val ordered // com.mikepenz.markdown.model/DefaultMarkdownTypography.ordered|{}ordered[0]
        final fun <get-ordered>(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/DefaultMarkdownTypography.ordered.<get-ordered>|<get-ordered>(){}[0]
    final val paragraph // com.mikepenz.markdown.model/DefaultMarkdownTypography.paragraph|{}paragraph[0]
        final fun <get-paragraph>(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/DefaultMarkdownTypography.paragraph.<get-paragraph>|<get-paragraph>(){}[0]
    final val quote // com.mikepenz.markdown.model/DefaultMarkdownTypography.quote|{}quote[0]
        final fun <get-quote>(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/DefaultMarkdownTypography.quote.<get-quote>|<get-quote>(){}[0]
    final val table // com.mikepenz.markdown.model/DefaultMarkdownTypography.table|{}table[0]
        final fun <get-table>(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/DefaultMarkdownTypography.table.<get-table>|<get-table>(){}[0]
    final val text // com.mikepenz.markdown.model/DefaultMarkdownTypography.text|{}text[0]
        final fun <get-text>(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/DefaultMarkdownTypography.text.<get-text>|<get-text>(){}[0]
    final val textLink // com.mikepenz.markdown.model/DefaultMarkdownTypography.textLink|{}textLink[0]
        final fun <get-textLink>(): androidx.compose.ui.text/TextLinkStyles // com.mikepenz.markdown.model/DefaultMarkdownTypography.textLink.<get-textLink>|<get-textLink>(){}[0]

    final fun component1(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/DefaultMarkdownTypography.component1|component1(){}[0]
    final fun component10(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/DefaultMarkdownTypography.component10|component10(){}[0]
    final fun component11(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/DefaultMarkdownTypography.component11|component11(){}[0]
    final fun component12(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/DefaultMarkdownTypography.component12|component12(){}[0]
    final fun component13(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/DefaultMarkdownTypography.component13|component13(){}[0]
    final fun component14(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/DefaultMarkdownTypography.component14|component14(){}[0]
    final fun component15(): androidx.compose.ui.text/TextLinkStyles // com.mikepenz.markdown.model/DefaultMarkdownTypography.component15|component15(){}[0]
    final fun component16(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/DefaultMarkdownTypography.component16|component16(){}[0]
    final fun component2(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/DefaultMarkdownTypography.component2|component2(){}[0]
    final fun component3(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/DefaultMarkdownTypography.component3|component3(){}[0]
    final fun component4(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/DefaultMarkdownTypography.component4|component4(){}[0]
    final fun component5(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/DefaultMarkdownTypography.component5|component5(){}[0]
    final fun component6(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/DefaultMarkdownTypography.component6|component6(){}[0]
    final fun component7(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/DefaultMarkdownTypography.component7|component7(){}[0]
    final fun component8(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/DefaultMarkdownTypography.component8|component8(){}[0]
    final fun component9(): androidx.compose.ui.text/TextStyle // com.mikepenz.markdown.model/DefaultMarkdownTypography.component9|component9(){}[0]
    final fun copy(androidx.compose.ui.text/TextStyle = ..., androidx.compose.ui.text/TextStyle = ..., androidx.compose.ui.text/TextStyle = ..., androidx.compose.ui.text/TextStyle = ..., androidx.compose.ui.text/TextStyle = ..., androidx.compose.ui.text/TextStyle = ..., androidx.compose.ui.text/TextStyle = ..., androidx.compose.ui.text/TextStyle = ..., androidx.compose.ui.text/TextStyle = ..., androidx.compose.ui.text/TextStyle = ..., androidx.compose.ui.text/TextStyle = ..., androidx.compose.ui.text/TextStyle = ..., androidx.compose.ui.text/TextStyle = ..., androidx.compose.ui.text/TextStyle = ..., androidx.compose.ui.text/TextLinkStyles = ..., androidx.compose.ui.text/TextStyle = ...): com.mikepenz.markdown.model/DefaultMarkdownTypography // com.mikepenz.markdown.model/DefaultMarkdownTypography.copy|copy(androidx.compose.ui.text.TextStyle;androidx.compose.ui.text.TextStyle;androidx.compose.ui.text.TextStyle;androidx.compose.ui.text.TextStyle;androidx.compose.ui.text.TextStyle;androidx.compose.ui.text.TextStyle;androidx.compose.ui.text.TextStyle;androidx.compose.ui.text.TextStyle;androidx.compose.ui.text.TextStyle;androidx.compose.ui.text.TextStyle;androidx.compose.ui.text.TextStyle;androidx.compose.ui.text.TextStyle;androidx.compose.ui.text.TextStyle;androidx.compose.ui.text.TextStyle;androidx.compose.ui.text.TextLinkStyles;androidx.compose.ui.text.TextStyle){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.mikepenz.markdown.model/DefaultMarkdownTypography.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.mikepenz.markdown.model/DefaultMarkdownTypography.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.mikepenz.markdown.model/DefaultMarkdownTypography.toString|toString(){}[0]
}

final class com.mikepenz.markdown.model/ImageData { // com.mikepenz.markdown.model/ImageData|null[0]
    constructor <init>(androidx.compose.ui.graphics.painter/Painter, androidx.compose.ui/Modifier = ..., kotlin/String? = ..., androidx.compose.ui/Alignment = ..., androidx.compose.ui.layout/ContentScale = ..., kotlin/Float = ..., androidx.compose.ui.graphics/ColorFilter? = ...) // com.mikepenz.markdown.model/ImageData.<init>|<init>(androidx.compose.ui.graphics.painter.Painter;androidx.compose.ui.Modifier;kotlin.String?;androidx.compose.ui.Alignment;androidx.compose.ui.layout.ContentScale;kotlin.Float;androidx.compose.ui.graphics.ColorFilter?){}[0]

    final val alignment // com.mikepenz.markdown.model/ImageData.alignment|{}alignment[0]
        final fun <get-alignment>(): androidx.compose.ui/Alignment // com.mikepenz.markdown.model/ImageData.alignment.<get-alignment>|<get-alignment>(){}[0]
    final val alpha // com.mikepenz.markdown.model/ImageData.alpha|{}alpha[0]
        final fun <get-alpha>(): kotlin/Float // com.mikepenz.markdown.model/ImageData.alpha.<get-alpha>|<get-alpha>(){}[0]
    final val colorFilter // com.mikepenz.markdown.model/ImageData.colorFilter|{}colorFilter[0]
        final fun <get-colorFilter>(): androidx.compose.ui.graphics/ColorFilter? // com.mikepenz.markdown.model/ImageData.colorFilter.<get-colorFilter>|<get-colorFilter>(){}[0]
    final val contentDescription // com.mikepenz.markdown.model/ImageData.contentDescription|{}contentDescription[0]
        final fun <get-contentDescription>(): kotlin/String? // com.mikepenz.markdown.model/ImageData.contentDescription.<get-contentDescription>|<get-contentDescription>(){}[0]
    final val contentScale // com.mikepenz.markdown.model/ImageData.contentScale|{}contentScale[0]
        final fun <get-contentScale>(): androidx.compose.ui.layout/ContentScale // com.mikepenz.markdown.model/ImageData.contentScale.<get-contentScale>|<get-contentScale>(){}[0]
    final val modifier // com.mikepenz.markdown.model/ImageData.modifier|{}modifier[0]
        final fun <get-modifier>(): androidx.compose.ui/Modifier // com.mikepenz.markdown.model/ImageData.modifier.<get-modifier>|<get-modifier>(){}[0]
    final val painter // com.mikepenz.markdown.model/ImageData.painter|{}painter[0]
        final fun <get-painter>(): androidx.compose.ui.graphics.painter/Painter // com.mikepenz.markdown.model/ImageData.painter.<get-painter>|<get-painter>(){}[0]

    final fun component1(): androidx.compose.ui.graphics.painter/Painter // com.mikepenz.markdown.model/ImageData.component1|component1(){}[0]
    final fun component2(): androidx.compose.ui/Modifier // com.mikepenz.markdown.model/ImageData.component2|component2(){}[0]
    final fun component3(): kotlin/String? // com.mikepenz.markdown.model/ImageData.component3|component3(){}[0]
    final fun component4(): androidx.compose.ui/Alignment // com.mikepenz.markdown.model/ImageData.component4|component4(){}[0]
    final fun component5(): androidx.compose.ui.layout/ContentScale // com.mikepenz.markdown.model/ImageData.component5|component5(){}[0]
    final fun component6(): kotlin/Float // com.mikepenz.markdown.model/ImageData.component6|component6(){}[0]
    final fun component7(): androidx.compose.ui.graphics/ColorFilter? // com.mikepenz.markdown.model/ImageData.component7|component7(){}[0]
    final fun copy(androidx.compose.ui.graphics.painter/Painter = ..., androidx.compose.ui/Modifier = ..., kotlin/String? = ..., androidx.compose.ui/Alignment = ..., androidx.compose.ui.layout/ContentScale = ..., kotlin/Float = ..., androidx.compose.ui.graphics/ColorFilter? = ...): com.mikepenz.markdown.model/ImageData // com.mikepenz.markdown.model/ImageData.copy|copy(androidx.compose.ui.graphics.painter.Painter;androidx.compose.ui.Modifier;kotlin.String?;androidx.compose.ui.Alignment;androidx.compose.ui.layout.ContentScale;kotlin.Float;androidx.compose.ui.graphics.ColorFilter?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.mikepenz.markdown.model/ImageData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.mikepenz.markdown.model/ImageData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.mikepenz.markdown.model/ImageData.toString|toString(){}[0]
}

final class com.mikepenz.markdown.model/Input { // com.mikepenz.markdown.model/Input|null[0]
    constructor <init>(kotlin/String, kotlin/Boolean, org.intellij.markdown.flavours/MarkdownFlavourDescriptor, org.intellij.markdown.parser/MarkdownParser, com.mikepenz.markdown.model/ReferenceLinkHandler) // com.mikepenz.markdown.model/Input.<init>|<init>(kotlin.String;kotlin.Boolean;org.intellij.markdown.flavours.MarkdownFlavourDescriptor;org.intellij.markdown.parser.MarkdownParser;com.mikepenz.markdown.model.ReferenceLinkHandler){}[0]

    final val content // com.mikepenz.markdown.model/Input.content|{}content[0]
        final fun <get-content>(): kotlin/String // com.mikepenz.markdown.model/Input.content.<get-content>|<get-content>(){}[0]
    final val flavour // com.mikepenz.markdown.model/Input.flavour|{}flavour[0]
        final fun <get-flavour>(): org.intellij.markdown.flavours/MarkdownFlavourDescriptor // com.mikepenz.markdown.model/Input.flavour.<get-flavour>|<get-flavour>(){}[0]
    final val lookupLinks // com.mikepenz.markdown.model/Input.lookupLinks|{}lookupLinks[0]
        final fun <get-lookupLinks>(): kotlin/Boolean // com.mikepenz.markdown.model/Input.lookupLinks.<get-lookupLinks>|<get-lookupLinks>(){}[0]
    final val parser // com.mikepenz.markdown.model/Input.parser|{}parser[0]
        final fun <get-parser>(): org.intellij.markdown.parser/MarkdownParser // com.mikepenz.markdown.model/Input.parser.<get-parser>|<get-parser>(){}[0]
    final val referenceLinkHandler // com.mikepenz.markdown.model/Input.referenceLinkHandler|{}referenceLinkHandler[0]
        final fun <get-referenceLinkHandler>(): com.mikepenz.markdown.model/ReferenceLinkHandler // com.mikepenz.markdown.model/Input.referenceLinkHandler.<get-referenceLinkHandler>|<get-referenceLinkHandler>(){}[0]

    final fun component1(): kotlin/String // com.mikepenz.markdown.model/Input.component1|component1(){}[0]
    final fun component2(): kotlin/Boolean // com.mikepenz.markdown.model/Input.component2|component2(){}[0]
    final fun component3(): org.intellij.markdown.flavours/MarkdownFlavourDescriptor // com.mikepenz.markdown.model/Input.component3|component3(){}[0]
    final fun component4(): org.intellij.markdown.parser/MarkdownParser // com.mikepenz.markdown.model/Input.component4|component4(){}[0]
    final fun component5(): com.mikepenz.markdown.model/ReferenceLinkHandler // com.mikepenz.markdown.model/Input.component5|component5(){}[0]
    final fun copy(kotlin/String = ..., kotlin/Boolean = ..., org.intellij.markdown.flavours/MarkdownFlavourDescriptor = ..., org.intellij.markdown.parser/MarkdownParser = ..., com.mikepenz.markdown.model/ReferenceLinkHandler = ...): com.mikepenz.markdown.model/Input // com.mikepenz.markdown.model/Input.copy|copy(kotlin.String;kotlin.Boolean;org.intellij.markdown.flavours.MarkdownFlavourDescriptor;org.intellij.markdown.parser.MarkdownParser;com.mikepenz.markdown.model.ReferenceLinkHandler){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.mikepenz.markdown.model/Input.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.mikepenz.markdown.model/Input.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.mikepenz.markdown.model/Input.toString|toString(){}[0]
}

final class com.mikepenz.markdown.model/NoOpImageTransformerImpl : com.mikepenz.markdown.model/ImageTransformer { // com.mikepenz.markdown.model/NoOpImageTransformerImpl|null[0]
    constructor <init>() // com.mikepenz.markdown.model/NoOpImageTransformerImpl.<init>|<init>(){}[0]

    final fun intrinsicSize(androidx.compose.ui.graphics.painter/Painter, androidx.compose.runtime/Composer?, kotlin/Int): androidx.compose.ui.geometry/Size // com.mikepenz.markdown.model/NoOpImageTransformerImpl.intrinsicSize|intrinsicSize(androidx.compose.ui.graphics.painter.Painter;androidx.compose.runtime.Composer?;kotlin.Int){}[0]
    final fun transform(kotlin/String, androidx.compose.runtime/Composer?, kotlin/Int): com.mikepenz.markdown.model/ImageData? // com.mikepenz.markdown.model/NoOpImageTransformerImpl.transform|transform(kotlin.String;androidx.compose.runtime.Composer?;kotlin.Int){}[0]
}

final class com.mikepenz.markdown.model/PlaceholderConfig { // com.mikepenz.markdown.model/PlaceholderConfig|null[0]
    constructor <init>(androidx.compose.ui.geometry/Size, androidx.compose.ui.text/PlaceholderVerticalAlign = ..., kotlin/Boolean = ...) // com.mikepenz.markdown.model/PlaceholderConfig.<init>|<init>(androidx.compose.ui.geometry.Size;androidx.compose.ui.text.PlaceholderVerticalAlign;kotlin.Boolean){}[0]

    final val animate // com.mikepenz.markdown.model/PlaceholderConfig.animate|{}animate[0]
        final fun <get-animate>(): kotlin/Boolean // com.mikepenz.markdown.model/PlaceholderConfig.animate.<get-animate>|<get-animate>(){}[0]
    final val size // com.mikepenz.markdown.model/PlaceholderConfig.size|{}size[0]
        final fun <get-size>(): androidx.compose.ui.geometry/Size // com.mikepenz.markdown.model/PlaceholderConfig.size.<get-size>|<get-size>(){}[0]
    final val verticalAlign // com.mikepenz.markdown.model/PlaceholderConfig.verticalAlign|{}verticalAlign[0]
        final fun <get-verticalAlign>(): androidx.compose.ui.text/PlaceholderVerticalAlign // com.mikepenz.markdown.model/PlaceholderConfig.verticalAlign.<get-verticalAlign>|<get-verticalAlign>(){}[0]

    final fun component1(): androidx.compose.ui.geometry/Size // com.mikepenz.markdown.model/PlaceholderConfig.component1|component1(){}[0]
    final fun component2(): androidx.compose.ui.text/PlaceholderVerticalAlign // com.mikepenz.markdown.model/PlaceholderConfig.component2|component2(){}[0]
    final fun component3(): kotlin/Boolean // com.mikepenz.markdown.model/PlaceholderConfig.component3|component3(){}[0]
    final fun copy(androidx.compose.ui.geometry/Size = ..., androidx.compose.ui.text/PlaceholderVerticalAlign = ..., kotlin/Boolean = ...): com.mikepenz.markdown.model/PlaceholderConfig // com.mikepenz.markdown.model/PlaceholderConfig.copy|copy(androidx.compose.ui.geometry.Size;androidx.compose.ui.text.PlaceholderVerticalAlign;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.mikepenz.markdown.model/PlaceholderConfig.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.mikepenz.markdown.model/PlaceholderConfig.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.mikepenz.markdown.model/PlaceholderConfig.toString|toString(){}[0]
}

final class com.mikepenz.markdown.model/ReferenceLinkHandlerImpl : com.mikepenz.markdown.model/ReferenceLinkHandler { // com.mikepenz.markdown.model/ReferenceLinkHandlerImpl|null[0]
    constructor <init>() // com.mikepenz.markdown.model/ReferenceLinkHandlerImpl.<init>|<init>(){}[0]

    final fun find(kotlin/String): kotlin/String // com.mikepenz.markdown.model/ReferenceLinkHandlerImpl.find|find(kotlin.String){}[0]
    final fun store(kotlin/String, kotlin/String?) // com.mikepenz.markdown.model/ReferenceLinkHandlerImpl.store|store(kotlin.String;kotlin.String?){}[0]
}

final object com.mikepenz.markdown.compose.components/CurrentComponentsBridge { // com.mikepenz.markdown.compose.components/CurrentComponentsBridge|null[0]
    final val blockQuote // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.blockQuote|{}blockQuote[0]
        final fun <get-blockQuote>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.blockQuote.<get-blockQuote>|<get-blockQuote>(){}[0]
    final val checkbox // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.checkbox|{}checkbox[0]
        final fun <get-checkbox>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.checkbox.<get-checkbox>|<get-checkbox>(){}[0]
    final val codeBlock // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.codeBlock|{}codeBlock[0]
        final fun <get-codeBlock>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.codeBlock.<get-codeBlock>|<get-codeBlock>(){}[0]
    final val codeFence // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.codeFence|{}codeFence[0]
        final fun <get-codeFence>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.codeFence.<get-codeFence>|<get-codeFence>(){}[0]
    final val custom // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.custom|{}custom[0]
        final fun <get-custom>(): kotlin/Function4<org.intellij.markdown/IElementType, com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>? // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.custom.<get-custom>|<get-custom>(){}[0]
    final val eol // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.eol|{}eol[0]
        final fun <get-eol>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.eol.<get-eol>|<get-eol>(){}[0]
    final val heading1 // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.heading1|{}heading1[0]
        final fun <get-heading1>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.heading1.<get-heading1>|<get-heading1>(){}[0]
    final val heading2 // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.heading2|{}heading2[0]
        final fun <get-heading2>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.heading2.<get-heading2>|<get-heading2>(){}[0]
    final val heading3 // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.heading3|{}heading3[0]
        final fun <get-heading3>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.heading3.<get-heading3>|<get-heading3>(){}[0]
    final val heading4 // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.heading4|{}heading4[0]
        final fun <get-heading4>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.heading4.<get-heading4>|<get-heading4>(){}[0]
    final val heading5 // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.heading5|{}heading5[0]
        final fun <get-heading5>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.heading5.<get-heading5>|<get-heading5>(){}[0]
    final val heading6 // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.heading6|{}heading6[0]
        final fun <get-heading6>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.heading6.<get-heading6>|<get-heading6>(){}[0]
    final val horizontalRule // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.horizontalRule|{}horizontalRule[0]
        final fun <get-horizontalRule>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.horizontalRule.<get-horizontalRule>|<get-horizontalRule>(){}[0]
    final val image // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.image|{}image[0]
        final fun <get-image>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.image.<get-image>|<get-image>(){}[0]
    final val orderedList // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.orderedList|{}orderedList[0]
        final fun <get-orderedList>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.orderedList.<get-orderedList>|<get-orderedList>(){}[0]
    final val paragraph // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.paragraph|{}paragraph[0]
        final fun <get-paragraph>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.paragraph.<get-paragraph>|<get-paragraph>(){}[0]
    final val setextHeading1 // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.setextHeading1|{}setextHeading1[0]
        final fun <get-setextHeading1>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.setextHeading1.<get-setextHeading1>|<get-setextHeading1>(){}[0]
    final val setextHeading2 // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.setextHeading2|{}setextHeading2[0]
        final fun <get-setextHeading2>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.setextHeading2.<get-setextHeading2>|<get-setextHeading2>(){}[0]
    final val table // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.table|{}table[0]
        final fun <get-table>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.table.<get-table>|<get-table>(){}[0]
    final val text // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.text|{}text[0]
        final fun <get-text>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.text.<get-text>|<get-text>(){}[0]
    final val unorderedList // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.unorderedList|{}unorderedList[0]
        final fun <get-unorderedList>(): kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> // com.mikepenz.markdown.compose.components/CurrentComponentsBridge.unorderedList.<get-unorderedList>|<get-unorderedList>(){}[0]
}

final object com.mikepenz.markdown.utils/EntityConverter { // com.mikepenz.markdown.utils/EntityConverter|null[0]
    final fun replaceEntities(kotlin/CharSequence, kotlin/Boolean, kotlin/Boolean): kotlin/String // com.mikepenz.markdown.utils/EntityConverter.replaceEntities|replaceEntities(kotlin.CharSequence;kotlin.Boolean;kotlin.Boolean){}[0]
}

final object com.mikepenz.markdown.utils/MarkdownLogger { // com.mikepenz.markdown.utils/MarkdownLogger|null[0]
    final var enabled // com.mikepenz.markdown.utils/MarkdownLogger.enabled|{}enabled[0]
        final fun <get-enabled>(): kotlin/Boolean // com.mikepenz.markdown.utils/MarkdownLogger.enabled.<get-enabled>|<get-enabled>(){}[0]
        final fun <set-enabled>(kotlin/Boolean) // com.mikepenz.markdown.utils/MarkdownLogger.enabled.<set-enabled>|<set-enabled>(kotlin.Boolean){}[0]

    final fun d(kotlin/String, kotlin/Function0<kotlin/String>) // com.mikepenz.markdown.utils/MarkdownLogger.d|d(kotlin.String;kotlin.Function0<kotlin.String>){}[0]
    final fun d(kotlin/String, kotlin/Throwable?, kotlin/Function0<kotlin/String>) // com.mikepenz.markdown.utils/MarkdownLogger.d|d(kotlin.String;kotlin.Throwable?;kotlin.Function0<kotlin.String>){}[0]
}

final const val com.mikepenz.markdown.utils/MARKDOWN_TAG_IMAGE_URL // com.mikepenz.markdown.utils/MARKDOWN_TAG_IMAGE_URL|{}MARKDOWN_TAG_IMAGE_URL[0]
    final fun <get-MARKDOWN_TAG_IMAGE_URL>(): kotlin/String // com.mikepenz.markdown.utils/MARKDOWN_TAG_IMAGE_URL.<get-MARKDOWN_TAG_IMAGE_URL>|<get-MARKDOWN_TAG_IMAGE_URL>(){}[0]

final val com.mikepenz.markdown.annotator/com_mikepenz_markdown_annotator_DefaultAnnotatorSettings$stableprop // com.mikepenz.markdown.annotator/com_mikepenz_markdown_annotator_DefaultAnnotatorSettings$stableprop|#static{}com_mikepenz_markdown_annotator_DefaultAnnotatorSettings$stableprop[0]
final val com.mikepenz.markdown.compose.components/com_mikepenz_markdown_compose_components_CurrentComponentsBridge$stableprop // com.mikepenz.markdown.compose.components/com_mikepenz_markdown_compose_components_CurrentComponentsBridge$stableprop|#static{}com_mikepenz_markdown_compose_components_CurrentComponentsBridge$stableprop[0]
final val com.mikepenz.markdown.compose.components/com_mikepenz_markdown_compose_components_MarkdownComponentModel$stableprop // com.mikepenz.markdown.compose.components/com_mikepenz_markdown_compose_components_MarkdownComponentModel$stableprop|#static{}com_mikepenz_markdown_compose_components_MarkdownComponentModel$stableprop[0]
final val com.mikepenz.markdown.compose.elements/listDepth // com.mikepenz.markdown.compose.elements/listDepth|@com.mikepenz.markdown.compose.components.MarkdownComponentModel{}listDepth[0]
    final fun (com.mikepenz.markdown.compose.components/MarkdownComponentModel).<get-listDepth>(): kotlin/Int // com.mikepenz.markdown.compose.elements/listDepth.<get-listDepth>|<get-listDepth>@com.mikepenz.markdown.compose.components.MarkdownComponentModel(){}[0]
final val com.mikepenz.markdown.compose.extendedspans/com_mikepenz_markdown_compose_extendedspans_ExtendedSpanPainter$stableprop // com.mikepenz.markdown.compose.extendedspans/com_mikepenz_markdown_compose_extendedspans_ExtendedSpanPainter$stableprop|#static{}com_mikepenz_markdown_compose_extendedspans_ExtendedSpanPainter$stableprop[0]
final val com.mikepenz.markdown.compose.extendedspans/com_mikepenz_markdown_compose_extendedspans_ExtendedSpans$stableprop // com.mikepenz.markdown.compose.extendedspans/com_mikepenz_markdown_compose_extendedspans_ExtendedSpans$stableprop|#static{}com_mikepenz_markdown_compose_extendedspans_ExtendedSpans$stableprop[0]
final val com.mikepenz.markdown.compose.extendedspans/com_mikepenz_markdown_compose_extendedspans_RoundedCornerSpanPainter$stableprop // com.mikepenz.markdown.compose.extendedspans/com_mikepenz_markdown_compose_extendedspans_RoundedCornerSpanPainter$stableprop|#static{}com_mikepenz_markdown_compose_extendedspans_RoundedCornerSpanPainter$stableprop[0]
final val com.mikepenz.markdown.compose.extendedspans/com_mikepenz_markdown_compose_extendedspans_RoundedCornerSpanPainter_Stroke$stableprop // com.mikepenz.markdown.compose.extendedspans/com_mikepenz_markdown_compose_extendedspans_RoundedCornerSpanPainter_Stroke$stableprop|#static{}com_mikepenz_markdown_compose_extendedspans_RoundedCornerSpanPainter_Stroke$stableprop[0]
final val com.mikepenz.markdown.compose.extendedspans/com_mikepenz_markdown_compose_extendedspans_RoundedCornerSpanPainter_TextPaddingValues$stableprop // com.mikepenz.markdown.compose.extendedspans/com_mikepenz_markdown_compose_extendedspans_RoundedCornerSpanPainter_TextPaddingValues$stableprop|#static{}com_mikepenz_markdown_compose_extendedspans_RoundedCornerSpanPainter_TextPaddingValues$stableprop[0]
final val com.mikepenz.markdown.compose.extendedspans/com_mikepenz_markdown_compose_extendedspans_SquigglyUnderlineAnimator$stableprop // com.mikepenz.markdown.compose.extendedspans/com_mikepenz_markdown_compose_extendedspans_SquigglyUnderlineAnimator$stableprop|#static{}com_mikepenz_markdown_compose_extendedspans_SquigglyUnderlineAnimator$stableprop[0]
final val com.mikepenz.markdown.compose.extendedspans/com_mikepenz_markdown_compose_extendedspans_SquigglyUnderlineSpanPainter$stableprop // com.mikepenz.markdown.compose.extendedspans/com_mikepenz_markdown_compose_extendedspans_SquigglyUnderlineSpanPainter$stableprop|#static{}com_mikepenz_markdown_compose_extendedspans_SquigglyUnderlineSpanPainter$stableprop[0]
final val com.mikepenz.markdown.compose/LocalBulletListHandler // com.mikepenz.markdown.compose/LocalBulletListHandler|{}LocalBulletListHandler[0]
    final fun <get-LocalBulletListHandler>(): androidx.compose.runtime/ProvidableCompositionLocal<com.mikepenz.markdown.model/BulletHandler> // com.mikepenz.markdown.compose/LocalBulletListHandler.<get-LocalBulletListHandler>|<get-LocalBulletListHandler>(){}[0]
final val com.mikepenz.markdown.compose/LocalImageTransformer // com.mikepenz.markdown.compose/LocalImageTransformer|{}LocalImageTransformer[0]
    final fun <get-LocalImageTransformer>(): androidx.compose.runtime/ProvidableCompositionLocal<com.mikepenz.markdown.model/ImageTransformer> // com.mikepenz.markdown.compose/LocalImageTransformer.<get-LocalImageTransformer>|<get-LocalImageTransformer>(){}[0]
final val com.mikepenz.markdown.compose/LocalMarkdownAnimations // com.mikepenz.markdown.compose/LocalMarkdownAnimations|{}LocalMarkdownAnimations[0]
    final fun <get-LocalMarkdownAnimations>(): androidx.compose.runtime/ProvidableCompositionLocal<com.mikepenz.markdown.model/MarkdownAnimations> // com.mikepenz.markdown.compose/LocalMarkdownAnimations.<get-LocalMarkdownAnimations>|<get-LocalMarkdownAnimations>(){}[0]
final val com.mikepenz.markdown.compose/LocalMarkdownAnnotator // com.mikepenz.markdown.compose/LocalMarkdownAnnotator|{}LocalMarkdownAnnotator[0]
    final fun <get-LocalMarkdownAnnotator>(): androidx.compose.runtime/ProvidableCompositionLocal<com.mikepenz.markdown.model/MarkdownAnnotator> // com.mikepenz.markdown.compose/LocalMarkdownAnnotator.<get-LocalMarkdownAnnotator>|<get-LocalMarkdownAnnotator>(){}[0]
final val com.mikepenz.markdown.compose/LocalMarkdownColors // com.mikepenz.markdown.compose/LocalMarkdownColors|{}LocalMarkdownColors[0]
    final fun <get-LocalMarkdownColors>(): androidx.compose.runtime/ProvidableCompositionLocal<com.mikepenz.markdown.model/MarkdownColors> // com.mikepenz.markdown.compose/LocalMarkdownColors.<get-LocalMarkdownColors>|<get-LocalMarkdownColors>(){}[0]
final val com.mikepenz.markdown.compose/LocalMarkdownComponents // com.mikepenz.markdown.compose/LocalMarkdownComponents|{}LocalMarkdownComponents[0]
    final fun <get-LocalMarkdownComponents>(): androidx.compose.runtime/ProvidableCompositionLocal<com.mikepenz.markdown.compose.components/MarkdownComponents> // com.mikepenz.markdown.compose/LocalMarkdownComponents.<get-LocalMarkdownComponents>|<get-LocalMarkdownComponents>(){}[0]
final val com.mikepenz.markdown.compose/LocalMarkdownDimens // com.mikepenz.markdown.compose/LocalMarkdownDimens|{}LocalMarkdownDimens[0]
    final fun <get-LocalMarkdownDimens>(): androidx.compose.runtime/ProvidableCompositionLocal<com.mikepenz.markdown.model/MarkdownDimens> // com.mikepenz.markdown.compose/LocalMarkdownDimens.<get-LocalMarkdownDimens>|<get-LocalMarkdownDimens>(){}[0]
final val com.mikepenz.markdown.compose/LocalMarkdownExtendedSpans // com.mikepenz.markdown.compose/LocalMarkdownExtendedSpans|{}LocalMarkdownExtendedSpans[0]
    final fun <get-LocalMarkdownExtendedSpans>(): androidx.compose.runtime/ProvidableCompositionLocal<com.mikepenz.markdown.model/MarkdownExtendedSpans> // com.mikepenz.markdown.compose/LocalMarkdownExtendedSpans.<get-LocalMarkdownExtendedSpans>|<get-LocalMarkdownExtendedSpans>(){}[0]
final val com.mikepenz.markdown.compose/LocalMarkdownInlineContent // com.mikepenz.markdown.compose/LocalMarkdownInlineContent|{}LocalMarkdownInlineContent[0]
    final fun <get-LocalMarkdownInlineContent>(): androidx.compose.runtime/ProvidableCompositionLocal<com.mikepenz.markdown.model/MarkdownInlineContent> // com.mikepenz.markdown.compose/LocalMarkdownInlineContent.<get-LocalMarkdownInlineContent>|<get-LocalMarkdownInlineContent>(){}[0]
final val com.mikepenz.markdown.compose/LocalMarkdownPadding // com.mikepenz.markdown.compose/LocalMarkdownPadding|{}LocalMarkdownPadding[0]
    final fun <get-LocalMarkdownPadding>(): androidx.compose.runtime/ProvidableCompositionLocal<com.mikepenz.markdown.model/MarkdownPadding> // com.mikepenz.markdown.compose/LocalMarkdownPadding.<get-LocalMarkdownPadding>|<get-LocalMarkdownPadding>(){}[0]
final val com.mikepenz.markdown.compose/LocalMarkdownTypography // com.mikepenz.markdown.compose/LocalMarkdownTypography|{}LocalMarkdownTypography[0]
    final fun <get-LocalMarkdownTypography>(): androidx.compose.runtime/ProvidableCompositionLocal<com.mikepenz.markdown.model/MarkdownTypography> // com.mikepenz.markdown.compose/LocalMarkdownTypography.<get-LocalMarkdownTypography>|<get-LocalMarkdownTypography>(){}[0]
final val com.mikepenz.markdown.compose/LocalOrderedListHandler // com.mikepenz.markdown.compose/LocalOrderedListHandler|{}LocalOrderedListHandler[0]
    final fun <get-LocalOrderedListHandler>(): androidx.compose.runtime/ProvidableCompositionLocal<com.mikepenz.markdown.model/BulletHandler> // com.mikepenz.markdown.compose/LocalOrderedListHandler.<get-LocalOrderedListHandler>|<get-LocalOrderedListHandler>(){}[0]
final val com.mikepenz.markdown.compose/LocalReferenceLinkHandler // com.mikepenz.markdown.compose/LocalReferenceLinkHandler|{}LocalReferenceLinkHandler[0]
    final fun <get-LocalReferenceLinkHandler>(): androidx.compose.runtime/ProvidableCompositionLocal<com.mikepenz.markdown.model/ReferenceLinkHandler> // com.mikepenz.markdown.compose/LocalReferenceLinkHandler.<get-LocalReferenceLinkHandler>|<get-LocalReferenceLinkHandler>(){}[0]
final val com.mikepenz.markdown.model/com_mikepenz_markdown_model_DefaultMarkdownAnimation$stableprop // com.mikepenz.markdown.model/com_mikepenz_markdown_model_DefaultMarkdownAnimation$stableprop|#static{}com_mikepenz_markdown_model_DefaultMarkdownAnimation$stableprop[0]
final val com.mikepenz.markdown.model/com_mikepenz_markdown_model_DefaultMarkdownAnnotator$stableprop // com.mikepenz.markdown.model/com_mikepenz_markdown_model_DefaultMarkdownAnnotator$stableprop|#static{}com_mikepenz_markdown_model_DefaultMarkdownAnnotator$stableprop[0]
final val com.mikepenz.markdown.model/com_mikepenz_markdown_model_DefaultMarkdownAnnotatorConfig$stableprop // com.mikepenz.markdown.model/com_mikepenz_markdown_model_DefaultMarkdownAnnotatorConfig$stableprop|#static{}com_mikepenz_markdown_model_DefaultMarkdownAnnotatorConfig$stableprop[0]
final val com.mikepenz.markdown.model/com_mikepenz_markdown_model_DefaultMarkdownColors$stableprop // com.mikepenz.markdown.model/com_mikepenz_markdown_model_DefaultMarkdownColors$stableprop|#static{}com_mikepenz_markdown_model_DefaultMarkdownColors$stableprop[0]
final val com.mikepenz.markdown.model/com_mikepenz_markdown_model_DefaultMarkdownExtendedSpans$stableprop // com.mikepenz.markdown.model/com_mikepenz_markdown_model_DefaultMarkdownExtendedSpans$stableprop|#static{}com_mikepenz_markdown_model_DefaultMarkdownExtendedSpans$stableprop[0]
final val com.mikepenz.markdown.model/com_mikepenz_markdown_model_DefaultMarkdownInlineContent$stableprop // com.mikepenz.markdown.model/com_mikepenz_markdown_model_DefaultMarkdownInlineContent$stableprop|#static{}com_mikepenz_markdown_model_DefaultMarkdownInlineContent$stableprop[0]
final val com.mikepenz.markdown.model/com_mikepenz_markdown_model_DefaultMarkdownTypography$stableprop // com.mikepenz.markdown.model/com_mikepenz_markdown_model_DefaultMarkdownTypography$stableprop|#static{}com_mikepenz_markdown_model_DefaultMarkdownTypography$stableprop[0]
final val com.mikepenz.markdown.model/com_mikepenz_markdown_model_ImageData$stableprop // com.mikepenz.markdown.model/com_mikepenz_markdown_model_ImageData$stableprop|#static{}com_mikepenz_markdown_model_ImageData$stableprop[0]
final val com.mikepenz.markdown.model/com_mikepenz_markdown_model_Input$stableprop // com.mikepenz.markdown.model/com_mikepenz_markdown_model_Input$stableprop|#static{}com_mikepenz_markdown_model_Input$stableprop[0]
final val com.mikepenz.markdown.model/com_mikepenz_markdown_model_MarkdownImageStateImpl$stableprop // com.mikepenz.markdown.model/com_mikepenz_markdown_model_MarkdownImageStateImpl$stableprop|#static{}com_mikepenz_markdown_model_MarkdownImageStateImpl$stableprop[0]
final val com.mikepenz.markdown.model/com_mikepenz_markdown_model_MarkdownStateImpl$stableprop // com.mikepenz.markdown.model/com_mikepenz_markdown_model_MarkdownStateImpl$stableprop|#static{}com_mikepenz_markdown_model_MarkdownStateImpl$stableprop[0]
final val com.mikepenz.markdown.model/com_mikepenz_markdown_model_NoOpImageTransformerImpl$stableprop // com.mikepenz.markdown.model/com_mikepenz_markdown_model_NoOpImageTransformerImpl$stableprop|#static{}com_mikepenz_markdown_model_NoOpImageTransformerImpl$stableprop[0]
final val com.mikepenz.markdown.model/com_mikepenz_markdown_model_PlaceholderConfig$stableprop // com.mikepenz.markdown.model/com_mikepenz_markdown_model_PlaceholderConfig$stableprop|#static{}com_mikepenz_markdown_model_PlaceholderConfig$stableprop[0]
final val com.mikepenz.markdown.model/com_mikepenz_markdown_model_ReferenceLinkHandlerImpl$stableprop // com.mikepenz.markdown.model/com_mikepenz_markdown_model_ReferenceLinkHandlerImpl$stableprop|#static{}com_mikepenz_markdown_model_ReferenceLinkHandlerImpl$stableprop[0]
final val com.mikepenz.markdown.model/com_mikepenz_markdown_model_State_Error$stableprop // com.mikepenz.markdown.model/com_mikepenz_markdown_model_State_Error$stableprop|#static{}com_mikepenz_markdown_model_State_Error$stableprop[0]
final val com.mikepenz.markdown.model/com_mikepenz_markdown_model_State_Loading$stableprop // com.mikepenz.markdown.model/com_mikepenz_markdown_model_State_Loading$stableprop|#static{}com_mikepenz_markdown_model_State_Loading$stableprop[0]
final val com.mikepenz.markdown.model/com_mikepenz_markdown_model_State_Success$stableprop // com.mikepenz.markdown.model/com_mikepenz_markdown_model_State_Success$stableprop|#static{}com_mikepenz_markdown_model_State_Success$stableprop[0]
final val com.mikepenz.markdown.utils/codeSpanStyle // com.mikepenz.markdown.utils/codeSpanStyle|@com.mikepenz.markdown.model.MarkdownTypography{}codeSpanStyle[0]
    final fun (com.mikepenz.markdown.model/MarkdownTypography).<get-codeSpanStyle>(androidx.compose.runtime/Composer?, kotlin/Int): androidx.compose.ui.text/SpanStyle // com.mikepenz.markdown.utils/codeSpanStyle.<get-codeSpanStyle>|<get-codeSpanStyle>@com.mikepenz.markdown.model.MarkdownTypography(androidx.compose.runtime.Composer?;kotlin.Int){}[0]
final val com.mikepenz.markdown.utils/com_mikepenz_markdown_utils_EntityConverter$stableprop // com.mikepenz.markdown.utils/com_mikepenz_markdown_utils_EntityConverter$stableprop|#static{}com_mikepenz_markdown_utils_EntityConverter$stableprop[0]
final val com.mikepenz.markdown.utils/com_mikepenz_markdown_utils_MarkdownLogger$stableprop // com.mikepenz.markdown.utils/com_mikepenz_markdown_utils_MarkdownLogger$stableprop|#static{}com_mikepenz_markdown_utils_MarkdownLogger$stableprop[0]

final fun (androidx.compose.ui.text/AnnotatedString.Builder).com.mikepenz.markdown.annotator/appendAutoLink(kotlin/String, org.intellij.markdown.ast/ASTNode, com.mikepenz.markdown.annotator/AnnotatorSettings) // com.mikepenz.markdown.annotator/appendAutoLink|appendAutoLink@androidx.compose.ui.text.AnnotatedString.Builder(kotlin.String;org.intellij.markdown.ast.ASTNode;com.mikepenz.markdown.annotator.AnnotatorSettings){}[0]
final fun (androidx.compose.ui.text/AnnotatedString.Builder).com.mikepenz.markdown.annotator/appendMarkdownLink(kotlin/String, org.intellij.markdown.ast/ASTNode, com.mikepenz.markdown.annotator/AnnotatorSettings) // com.mikepenz.markdown.annotator/appendMarkdownLink|appendMarkdownLink@androidx.compose.ui.text.AnnotatedString.Builder(kotlin.String;org.intellij.markdown.ast.ASTNode;com.mikepenz.markdown.annotator.AnnotatorSettings){}[0]
final fun (androidx.compose.ui.text/AnnotatedString.Builder).com.mikepenz.markdown.annotator/appendMarkdownReference(kotlin/String, org.intellij.markdown.ast/ASTNode, com.mikepenz.markdown.annotator/AnnotatorSettings) // com.mikepenz.markdown.annotator/appendMarkdownReference|appendMarkdownReference@androidx.compose.ui.text.AnnotatedString.Builder(kotlin.String;org.intellij.markdown.ast.ASTNode;com.mikepenz.markdown.annotator.AnnotatorSettings){}[0]
final fun (androidx.compose.ui.text/AnnotatedString.Builder).com.mikepenz.markdown.annotator/buildMarkdownAnnotatedString(kotlin/String, kotlin.collections/List<org.intellij.markdown.ast/ASTNode>, com.mikepenz.markdown.annotator/AnnotatorSettings) // com.mikepenz.markdown.annotator/buildMarkdownAnnotatedString|buildMarkdownAnnotatedString@androidx.compose.ui.text.AnnotatedString.Builder(kotlin.String;kotlin.collections.List<org.intellij.markdown.ast.ASTNode>;com.mikepenz.markdown.annotator.AnnotatorSettings){}[0]
final fun (androidx.compose.ui.text/AnnotatedString.Builder).com.mikepenz.markdown.annotator/buildMarkdownAnnotatedString(kotlin/String, org.intellij.markdown.ast/ASTNode, com.mikepenz.markdown.annotator/AnnotatorSettings) // com.mikepenz.markdown.annotator/buildMarkdownAnnotatedString|buildMarkdownAnnotatedString@androidx.compose.ui.text.AnnotatedString.Builder(kotlin.String;org.intellij.markdown.ast.ASTNode;com.mikepenz.markdown.annotator.AnnotatorSettings){}[0]
final fun (androidx.compose.ui.text/TextLinkStyles).com.mikepenz.markdown.compose.extendedspans.internal/update(kotlin/Function1<androidx.compose.ui.text/SpanStyle, androidx.compose.ui.text/SpanStyle>): androidx.compose.ui.text/TextLinkStyles // com.mikepenz.markdown.compose.extendedspans.internal/update|update@androidx.compose.ui.text.TextLinkStyles(kotlin.Function1<androidx.compose.ui.text.SpanStyle,androidx.compose.ui.text.SpanStyle>){}[0]
final fun (androidx.compose.ui/Modifier).com.mikepenz.markdown.compose.extendedspans/drawBehind(com.mikepenz.markdown.compose.extendedspans/ExtendedSpans): androidx.compose.ui/Modifier // com.mikepenz.markdown.compose.extendedspans/drawBehind|drawBehind@androidx.compose.ui.Modifier(com.mikepenz.markdown.compose.extendedspans.ExtendedSpans){}[0]
final fun (kotlin.collections/List<org.intellij.markdown.ast/ASTNode>).com.mikepenz.markdown.utils/mapAutoLinkToType(org.intellij.markdown/IElementType = ...): kotlin.collections/List<org.intellij.markdown.ast/ASTNode> // com.mikepenz.markdown.utils/mapAutoLinkToType|mapAutoLinkToType@kotlin.collections.List<org.intellij.markdown.ast.ASTNode>(org.intellij.markdown.IElementType){}[0]
final fun (kotlin/String).com.mikepenz.markdown.annotator/buildMarkdownAnnotatedString(androidx.compose.ui.text/TextStyle, androidx.compose.ui.text/SpanStyle = ..., androidx.compose.ui.text/SpanStyle = ..., org.intellij.markdown.flavours/MarkdownFlavourDescriptor = ..., com.mikepenz.markdown.model/MarkdownAnnotator = ..., com.mikepenz.markdown.model/ReferenceLinkHandler? = ..., androidx.compose.ui.text/LinkInteractionListener? = ...): androidx.compose.ui.text/AnnotatedString // com.mikepenz.markdown.annotator/buildMarkdownAnnotatedString|buildMarkdownAnnotatedString@kotlin.String(androidx.compose.ui.text.TextStyle;androidx.compose.ui.text.SpanStyle;androidx.compose.ui.text.SpanStyle;org.intellij.markdown.flavours.MarkdownFlavourDescriptor;com.mikepenz.markdown.model.MarkdownAnnotator;com.mikepenz.markdown.model.ReferenceLinkHandler?;androidx.compose.ui.text.LinkInteractionListener?){}[0]
final fun (kotlin/String).com.mikepenz.markdown.annotator/buildMarkdownAnnotatedString(androidx.compose.ui.text/TextStyle, com.mikepenz.markdown.annotator/AnnotatorSettings, org.intellij.markdown.flavours/MarkdownFlavourDescriptor = ...): androidx.compose.ui.text/AnnotatedString // com.mikepenz.markdown.annotator/buildMarkdownAnnotatedString|buildMarkdownAnnotatedString@kotlin.String(androidx.compose.ui.text.TextStyle;com.mikepenz.markdown.annotator.AnnotatorSettings;org.intellij.markdown.flavours.MarkdownFlavourDescriptor){}[0]
final fun (kotlin/String).com.mikepenz.markdown.annotator/buildMarkdownAnnotatedString(org.intellij.markdown.ast/ASTNode, androidx.compose.ui.text/TextStyle, com.mikepenz.markdown.annotator/AnnotatorSettings): androidx.compose.ui.text/AnnotatedString // com.mikepenz.markdown.annotator/buildMarkdownAnnotatedString|buildMarkdownAnnotatedString@kotlin.String(org.intellij.markdown.ast.ASTNode;androidx.compose.ui.text.TextStyle;com.mikepenz.markdown.annotator.AnnotatorSettings){}[0]
final fun (org.intellij.markdown.ast/ASTNode).com.mikepenz.markdown.utils/getUnescapedTextInNode(kotlin/CharSequence): kotlin/String // com.mikepenz.markdown.utils/getUnescapedTextInNode|getUnescapedTextInNode@org.intellij.markdown.ast.ASTNode(kotlin.CharSequence){}[0]
final fun com.mikepenz.markdown.annotator/annotatorSettings(androidx.compose.ui.text/TextLinkStyles?, androidx.compose.ui.text/SpanStyle?, com.mikepenz.markdown.model/MarkdownAnnotator?, com.mikepenz.markdown.model/ReferenceLinkHandler?, androidx.compose.ui.platform/UriHandler?, androidx.compose.ui.text/LinkInteractionListener?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): com.mikepenz.markdown.annotator/AnnotatorSettings // com.mikepenz.markdown.annotator/annotatorSettings|annotatorSettings(androidx.compose.ui.text.TextLinkStyles?;androidx.compose.ui.text.SpanStyle?;com.mikepenz.markdown.model.MarkdownAnnotator?;com.mikepenz.markdown.model.ReferenceLinkHandler?;androidx.compose.ui.platform.UriHandler?;androidx.compose.ui.text.LinkInteractionListener?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.annotator/com_mikepenz_markdown_annotator_DefaultAnnotatorSettings$stableprop_getter(): kotlin/Int // com.mikepenz.markdown.annotator/com_mikepenz_markdown_annotator_DefaultAnnotatorSettings$stableprop_getter|com_mikepenz_markdown_annotator_DefaultAnnotatorSettings$stableprop_getter(){}[0]
final fun com.mikepenz.markdown.compose.components/com_mikepenz_markdown_compose_components_CurrentComponentsBridge$stableprop_getter(): kotlin/Int // com.mikepenz.markdown.compose.components/com_mikepenz_markdown_compose_components_CurrentComponentsBridge$stableprop_getter|com_mikepenz_markdown_compose_components_CurrentComponentsBridge$stableprop_getter(){}[0]
final fun com.mikepenz.markdown.compose.components/com_mikepenz_markdown_compose_components_MarkdownComponentModel$stableprop_getter(): kotlin/Int // com.mikepenz.markdown.compose.components/com_mikepenz_markdown_compose_components_MarkdownComponentModel$stableprop_getter|com_mikepenz_markdown_compose_components_MarkdownComponentModel$stableprop_getter(){}[0]
final fun com.mikepenz.markdown.compose.components/markdownComponents(kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> = ..., kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> = ..., kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> = ..., kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> = ..., kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> = ..., kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> = ..., kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> = ..., kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> = ..., kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> = ..., kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> = ..., kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> = ..., kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> = ..., kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> = ..., kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> = ..., kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> = ..., kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> = ..., kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> = ..., kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> = ..., kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> = ..., kotlin/Function3<com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit> = ..., kotlin/Function4<org.intellij.markdown/IElementType, com.mikepenz.markdown.compose.components/MarkdownComponentModel, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>? = ...): com.mikepenz.markdown.compose.components/MarkdownComponents // com.mikepenz.markdown.compose.components/markdownComponents|markdownComponents(kotlin.Function3<com.mikepenz.markdown.compose.components.MarkdownComponentModel,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;kotlin.Function3<com.mikepenz.markdown.compose.components.MarkdownComponentModel,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;kotlin.Function3<com.mikepenz.markdown.compose.components.MarkdownComponentModel,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;kotlin.Function3<com.mikepenz.markdown.compose.components.MarkdownComponentModel,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;kotlin.Function3<com.mikepenz.markdown.compose.components.MarkdownComponentModel,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;kotlin.Function3<com.mikepenz.markdown.compose.components.MarkdownComponentModel,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;kotlin.Function3<com.mikepenz.markdown.compose.components.MarkdownComponentModel,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;kotlin.Function3<com.mikepenz.markdown.compose.components.MarkdownComponentModel,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;kotlin.Function3<com.mikepenz.markdown.compose.components.MarkdownComponentModel,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;kotlin.Function3<com.mikepenz.markdown.compose.components.MarkdownComponentModel,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;kotlin.Function3<com.mikepenz.markdown.compose.components.MarkdownComponentModel,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;kotlin.Function3<com.mikepenz.markdown.compose.components.MarkdownComponentModel,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;kotlin.Function3<com.mikepenz.markdown.compose.components.MarkdownComponentModel,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;kotlin.Function3<com.mikepenz.markdown.compose.components.MarkdownComponentModel,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;kotlin.Function3<com.mikepenz.markdown.compose.components.MarkdownComponentModel,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;kotlin.Function3<com.mikepenz.markdown.compose.components.MarkdownComponentModel,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;kotlin.Function3<com.mikepenz.markdown.compose.components.MarkdownComponentModel,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;kotlin.Function3<com.mikepenz.markdown.compose.components.MarkdownComponentModel,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;kotlin.Function3<com.mikepenz.markdown.compose.components.MarkdownComponentModel,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;kotlin.Function3<com.mikepenz.markdown.compose.components.MarkdownComponentModel,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;kotlin.Function4<org.intellij.markdown.IElementType,com.mikepenz.markdown.compose.components.MarkdownComponentModel,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>?){}[0]
final fun com.mikepenz.markdown.compose.elements.material/MarkdownBasicText(androidx.compose.ui.text/AnnotatedString, androidx.compose.ui.text/TextStyle, androidx.compose.ui/Modifier?, androidx.compose.ui.graphics/Color, androidx.compose.ui.unit/TextUnit, androidx.compose.ui.text.font/FontStyle?, androidx.compose.ui.text.font/FontWeight?, androidx.compose.ui.text.font/FontFamily?, androidx.compose.ui.unit/TextUnit, androidx.compose.ui.text.style/TextDecoration?, androidx.compose.ui.text.style/TextAlign, androidx.compose.ui.unit/TextUnit, androidx.compose.ui.text.style/TextOverflow, kotlin/Boolean, kotlin/Int, kotlin/Int, kotlin.collections/Map<kotlin/String, androidx.compose.foundation.text/InlineTextContent>?, kotlin/Function1<androidx.compose.ui.text/TextLayoutResult, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int, kotlin/Int) // com.mikepenz.markdown.compose.elements.material/MarkdownBasicText|MarkdownBasicText(androidx.compose.ui.text.AnnotatedString;androidx.compose.ui.text.TextStyle;androidx.compose.ui.Modifier?;androidx.compose.ui.graphics.Color;androidx.compose.ui.unit.TextUnit;androidx.compose.ui.text.font.FontStyle?;androidx.compose.ui.text.font.FontWeight?;androidx.compose.ui.text.font.FontFamily?;androidx.compose.ui.unit.TextUnit;androidx.compose.ui.text.style.TextDecoration?;androidx.compose.ui.text.style.TextAlign;androidx.compose.ui.unit.TextUnit;androidx.compose.ui.text.style.TextOverflow;kotlin.Boolean;kotlin.Int;kotlin.Int;kotlin.collections.Map<kotlin.String,androidx.compose.foundation.text.InlineTextContent>?;kotlin.Function1<androidx.compose.ui.text.TextLayoutResult,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.compose.elements/MarkdownBlockQuote(kotlin/String, org.intellij.markdown.ast/ASTNode, androidx.compose.ui.text/TextStyle?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int) // com.mikepenz.markdown.compose.elements/MarkdownBlockQuote|MarkdownBlockQuote(kotlin.String;org.intellij.markdown.ast.ASTNode;androidx.compose.ui.text.TextStyle?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.compose.elements/MarkdownBulletList(kotlin/String, org.intellij.markdown.ast/ASTNode, androidx.compose.ui.text/TextStyle?, kotlin/Int, kotlin/Function1<androidx.compose.foundation.layout/RowScope, androidx.compose.ui/Modifier>?, kotlin/Function1<androidx.compose.foundation.layout/RowScope, androidx.compose.ui/Modifier>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int) // com.mikepenz.markdown.compose.elements/MarkdownBulletList|MarkdownBulletList(kotlin.String;org.intellij.markdown.ast.ASTNode;androidx.compose.ui.text.TextStyle?;kotlin.Int;kotlin.Function1<androidx.compose.foundation.layout.RowScope,androidx.compose.ui.Modifier>?;kotlin.Function1<androidx.compose.foundation.layout.RowScope,androidx.compose.ui.Modifier>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.compose.elements/MarkdownCheckBox(kotlin/String, org.intellij.markdown.ast/ASTNode, androidx.compose.ui.text/TextStyle, kotlin/Function4<kotlin/Boolean, androidx.compose.ui/Modifier, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int) // com.mikepenz.markdown.compose.elements/MarkdownCheckBox|MarkdownCheckBox(kotlin.String;org.intellij.markdown.ast.ASTNode;androidx.compose.ui.text.TextStyle;kotlin.Function4<kotlin.Boolean,androidx.compose.ui.Modifier,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.compose.elements/MarkdownCodeBackground(androidx.compose.ui.graphics/Color, androidx.compose.ui/Modifier?, androidx.compose.ui.graphics/Shape?, androidx.compose.foundation/BorderStroke?, androidx.compose.ui.unit/Dp, kotlin/Function2<androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int) // com.mikepenz.markdown.compose.elements/MarkdownCodeBackground|MarkdownCodeBackground(androidx.compose.ui.graphics.Color;androidx.compose.ui.Modifier?;androidx.compose.ui.graphics.Shape?;androidx.compose.foundation.BorderStroke?;androidx.compose.ui.unit.Dp;kotlin.Function2<androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.compose.elements/MarkdownCodeBlock(kotlin/String, org.intellij.markdown.ast/ASTNode, androidx.compose.ui.text/TextStyle?, kotlin/Function5<kotlin/String, kotlin/String?, androidx.compose.ui.text/TextStyle, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int) // com.mikepenz.markdown.compose.elements/MarkdownCodeBlock|MarkdownCodeBlock(kotlin.String;org.intellij.markdown.ast.ASTNode;androidx.compose.ui.text.TextStyle?;kotlin.Function5<kotlin.String,kotlin.String?,androidx.compose.ui.text.TextStyle,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.compose.elements/MarkdownCodeFence(kotlin/String, org.intellij.markdown.ast/ASTNode, androidx.compose.ui.text/TextStyle?, kotlin/Function5<kotlin/String, kotlin/String?, androidx.compose.ui.text/TextStyle, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int) // com.mikepenz.markdown.compose.elements/MarkdownCodeFence|MarkdownCodeFence(kotlin.String;org.intellij.markdown.ast.ASTNode;androidx.compose.ui.text.TextStyle?;kotlin.Function5<kotlin.String,kotlin.String?,androidx.compose.ui.text.TextStyle,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.compose.elements/MarkdownDivider(androidx.compose.ui/Modifier?, androidx.compose.ui.graphics/Color, androidx.compose.ui.unit/Dp, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int) // com.mikepenz.markdown.compose.elements/MarkdownDivider|MarkdownDivider(androidx.compose.ui.Modifier?;androidx.compose.ui.graphics.Color;androidx.compose.ui.unit.Dp;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.compose.elements/MarkdownHeader(kotlin/String, org.intellij.markdown.ast/ASTNode, androidx.compose.ui.text/TextStyle, org.intellij.markdown/IElementType?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int) // com.mikepenz.markdown.compose.elements/MarkdownHeader|MarkdownHeader(kotlin.String;org.intellij.markdown.ast.ASTNode;androidx.compose.ui.text.TextStyle;org.intellij.markdown.IElementType?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.compose.elements/MarkdownImage(kotlin/String, org.intellij.markdown.ast/ASTNode, androidx.compose.runtime/Composer?, kotlin/Int) // com.mikepenz.markdown.compose.elements/MarkdownImage|MarkdownImage(kotlin.String;org.intellij.markdown.ast.ASTNode;androidx.compose.runtime.Composer?;kotlin.Int){}[0]
final fun com.mikepenz.markdown.compose.elements/MarkdownListItems(kotlin/String, org.intellij.markdown.ast/ASTNode, kotlin/Int, kotlin/Function1<androidx.compose.foundation.layout/RowScope, androidx.compose.ui/Modifier>?, kotlin/Function1<androidx.compose.foundation.layout/RowScope, androidx.compose.ui/Modifier>?, kotlin/Function5<kotlin/Int, kotlin/Int, org.intellij.markdown.ast/ASTNode?, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int) // com.mikepenz.markdown.compose.elements/MarkdownListItems|MarkdownListItems(kotlin.String;org.intellij.markdown.ast.ASTNode;kotlin.Int;kotlin.Function1<androidx.compose.foundation.layout.RowScope,androidx.compose.ui.Modifier>?;kotlin.Function1<androidx.compose.foundation.layout.RowScope,androidx.compose.ui.Modifier>?;kotlin.Function5<kotlin.Int,kotlin.Int,org.intellij.markdown.ast.ASTNode?,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.compose.elements/MarkdownOrderedList(kotlin/String, org.intellij.markdown.ast/ASTNode, androidx.compose.ui.text/TextStyle?, kotlin/Int, kotlin/Function1<androidx.compose.foundation.layout/RowScope, androidx.compose.ui/Modifier>?, kotlin/Function1<androidx.compose.foundation.layout/RowScope, androidx.compose.ui/Modifier>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int) // com.mikepenz.markdown.compose.elements/MarkdownOrderedList|MarkdownOrderedList(kotlin.String;org.intellij.markdown.ast.ASTNode;androidx.compose.ui.text.TextStyle?;kotlin.Int;kotlin.Function1<androidx.compose.foundation.layout.RowScope,androidx.compose.ui.Modifier>?;kotlin.Function1<androidx.compose.foundation.layout.RowScope,androidx.compose.ui.Modifier>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.compose.elements/MarkdownParagraph(kotlin/String, org.intellij.markdown.ast/ASTNode, androidx.compose.ui/Modifier?, androidx.compose.ui.text/TextStyle?, com.mikepenz.markdown.annotator/AnnotatorSettings?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int) // com.mikepenz.markdown.compose.elements/MarkdownParagraph|MarkdownParagraph(kotlin.String;org.intellij.markdown.ast.ASTNode;androidx.compose.ui.Modifier?;androidx.compose.ui.text.TextStyle?;com.mikepenz.markdown.annotator.AnnotatorSettings?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.compose.elements/MarkdownTable(kotlin/String, org.intellij.markdown.ast/ASTNode, androidx.compose.ui.text/TextStyle, com.mikepenz.markdown.annotator/AnnotatorSettings?, kotlin/Function6<kotlin/String, org.intellij.markdown.ast/ASTNode, androidx.compose.ui.unit/Dp, androidx.compose.ui.text/TextStyle, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>?, kotlin/Function6<kotlin/String, org.intellij.markdown.ast/ASTNode, androidx.compose.ui.unit/Dp, androidx.compose.ui.text/TextStyle, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int) // com.mikepenz.markdown.compose.elements/MarkdownTable|MarkdownTable(kotlin.String;org.intellij.markdown.ast.ASTNode;androidx.compose.ui.text.TextStyle;com.mikepenz.markdown.annotator.AnnotatorSettings?;kotlin.Function6<kotlin.String,org.intellij.markdown.ast.ASTNode,androidx.compose.ui.unit.Dp,androidx.compose.ui.text.TextStyle,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>?;kotlin.Function6<kotlin.String,org.intellij.markdown.ast.ASTNode,androidx.compose.ui.unit.Dp,androidx.compose.ui.text.TextStyle,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.compose.elements/MarkdownTableBasicText(kotlin/String, org.intellij.markdown.ast/ASTNode, androidx.compose.ui.text/TextStyle, kotlin/Int, androidx.compose.ui.text.style/TextOverflow, com.mikepenz.markdown.annotator/AnnotatorSettings?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int) // com.mikepenz.markdown.compose.elements/MarkdownTableBasicText|MarkdownTableBasicText(kotlin.String;org.intellij.markdown.ast.ASTNode;androidx.compose.ui.text.TextStyle;kotlin.Int;androidx.compose.ui.text.style.TextOverflow;com.mikepenz.markdown.annotator.AnnotatorSettings?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.compose.elements/MarkdownTableHeader(kotlin/String, org.intellij.markdown.ast/ASTNode, androidx.compose.ui.unit/Dp, androidx.compose.ui.text/TextStyle, androidx.compose.ui/Alignment.Vertical?, kotlin/Int, androidx.compose.ui.text.style/TextOverflow, com.mikepenz.markdown.annotator/AnnotatorSettings?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int) // com.mikepenz.markdown.compose.elements/MarkdownTableHeader|MarkdownTableHeader(kotlin.String;org.intellij.markdown.ast.ASTNode;androidx.compose.ui.unit.Dp;androidx.compose.ui.text.TextStyle;androidx.compose.ui.Alignment.Vertical?;kotlin.Int;androidx.compose.ui.text.style.TextOverflow;com.mikepenz.markdown.annotator.AnnotatorSettings?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.compose.elements/MarkdownTableRow(kotlin/String, org.intellij.markdown.ast/ASTNode, androidx.compose.ui.unit/Dp, androidx.compose.ui.text/TextStyle, androidx.compose.ui/Alignment.Vertical?, kotlin/Int, androidx.compose.ui.text.style/TextOverflow, com.mikepenz.markdown.annotator/AnnotatorSettings?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int) // com.mikepenz.markdown.compose.elements/MarkdownTableRow|MarkdownTableRow(kotlin.String;org.intellij.markdown.ast.ASTNode;androidx.compose.ui.unit.Dp;androidx.compose.ui.text.TextStyle;androidx.compose.ui.Alignment.Vertical?;kotlin.Int;androidx.compose.ui.text.style.TextOverflow;com.mikepenz.markdown.annotator.AnnotatorSettings?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.compose.elements/MarkdownText(androidx.compose.ui.text/AnnotatedString, androidx.compose.ui/Modifier?, androidx.compose.ui.text/TextStyle?, com.mikepenz.markdown.compose.extendedspans/ExtendedSpans?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int) // com.mikepenz.markdown.compose.elements/MarkdownText|MarkdownText(androidx.compose.ui.text.AnnotatedString;androidx.compose.ui.Modifier?;androidx.compose.ui.text.TextStyle?;com.mikepenz.markdown.compose.extendedspans.ExtendedSpans?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.compose.elements/MarkdownText(androidx.compose.ui.text/AnnotatedString, androidx.compose.ui/Modifier?, androidx.compose.ui.text/TextStyle?, kotlin/Function2<androidx.compose.ui.text/TextLayoutResult, androidx.compose.ui.graphics/Color?, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int) // com.mikepenz.markdown.compose.elements/MarkdownText|MarkdownText(androidx.compose.ui.text.AnnotatedString;androidx.compose.ui.Modifier?;androidx.compose.ui.text.TextStyle?;kotlin.Function2<androidx.compose.ui.text.TextLayoutResult,androidx.compose.ui.graphics.Color?,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.compose.elements/MarkdownText(kotlin/String, androidx.compose.ui/Modifier?, androidx.compose.ui.text/TextStyle?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int) // com.mikepenz.markdown.compose.elements/MarkdownText|MarkdownText(kotlin.String;androidx.compose.ui.Modifier?;androidx.compose.ui.text.TextStyle?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.compose.elements/MarkdownText(kotlin/String, org.intellij.markdown.ast/ASTNode, androidx.compose.ui.text/TextStyle, androidx.compose.ui/Modifier?, org.intellij.markdown/IElementType?, com.mikepenz.markdown.annotator/AnnotatorSettings?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int) // com.mikepenz.markdown.compose.elements/MarkdownText|MarkdownText(kotlin.String;org.intellij.markdown.ast.ASTNode;androidx.compose.ui.text.TextStyle;androidx.compose.ui.Modifier?;org.intellij.markdown.IElementType?;com.mikepenz.markdown.annotator.AnnotatorSettings?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.compose.elements/VerticalMarkdownDivider(androidx.compose.ui/Modifier?, androidx.compose.ui.graphics/Color, androidx.compose.ui.unit/Dp, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int) // com.mikepenz.markdown.compose.elements/VerticalMarkdownDivider|VerticalMarkdownDivider(androidx.compose.ui.Modifier?;androidx.compose.ui.graphics.Color;androidx.compose.ui.unit.Dp;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.compose.elements/createImageInlineTextContent(com.mikepenz.markdown.model/PlaceholderConfig, com.mikepenz.markdown.model/ImageTransformer, com.mikepenz.markdown.model/MarkdownImageState): androidx.compose.foundation.text/InlineTextContent // com.mikepenz.markdown.compose.elements/createImageInlineTextContent|createImageInlineTextContent(com.mikepenz.markdown.model.PlaceholderConfig;com.mikepenz.markdown.model.ImageTransformer;com.mikepenz.markdown.model.MarkdownImageState){}[0]
final fun com.mikepenz.markdown.compose.extendedspans/com_mikepenz_markdown_compose_extendedspans_ExtendedSpanPainter$stableprop_getter(): kotlin/Int // com.mikepenz.markdown.compose.extendedspans/com_mikepenz_markdown_compose_extendedspans_ExtendedSpanPainter$stableprop_getter|com_mikepenz_markdown_compose_extendedspans_ExtendedSpanPainter$stableprop_getter(){}[0]
final fun com.mikepenz.markdown.compose.extendedspans/com_mikepenz_markdown_compose_extendedspans_ExtendedSpans$stableprop_getter(): kotlin/Int // com.mikepenz.markdown.compose.extendedspans/com_mikepenz_markdown_compose_extendedspans_ExtendedSpans$stableprop_getter|com_mikepenz_markdown_compose_extendedspans_ExtendedSpans$stableprop_getter(){}[0]
final fun com.mikepenz.markdown.compose.extendedspans/com_mikepenz_markdown_compose_extendedspans_RoundedCornerSpanPainter$stableprop_getter(): kotlin/Int // com.mikepenz.markdown.compose.extendedspans/com_mikepenz_markdown_compose_extendedspans_RoundedCornerSpanPainter$stableprop_getter|com_mikepenz_markdown_compose_extendedspans_RoundedCornerSpanPainter$stableprop_getter(){}[0]
final fun com.mikepenz.markdown.compose.extendedspans/com_mikepenz_markdown_compose_extendedspans_RoundedCornerSpanPainter_Stroke$stableprop_getter(): kotlin/Int // com.mikepenz.markdown.compose.extendedspans/com_mikepenz_markdown_compose_extendedspans_RoundedCornerSpanPainter_Stroke$stableprop_getter|com_mikepenz_markdown_compose_extendedspans_RoundedCornerSpanPainter_Stroke$stableprop_getter(){}[0]
final fun com.mikepenz.markdown.compose.extendedspans/com_mikepenz_markdown_compose_extendedspans_RoundedCornerSpanPainter_TextPaddingValues$stableprop_getter(): kotlin/Int // com.mikepenz.markdown.compose.extendedspans/com_mikepenz_markdown_compose_extendedspans_RoundedCornerSpanPainter_TextPaddingValues$stableprop_getter|com_mikepenz_markdown_compose_extendedspans_RoundedCornerSpanPainter_TextPaddingValues$stableprop_getter(){}[0]
final fun com.mikepenz.markdown.compose.extendedspans/com_mikepenz_markdown_compose_extendedspans_SquigglyUnderlineAnimator$stableprop_getter(): kotlin/Int // com.mikepenz.markdown.compose.extendedspans/com_mikepenz_markdown_compose_extendedspans_SquigglyUnderlineAnimator$stableprop_getter|com_mikepenz_markdown_compose_extendedspans_SquigglyUnderlineAnimator$stableprop_getter(){}[0]
final fun com.mikepenz.markdown.compose.extendedspans/com_mikepenz_markdown_compose_extendedspans_SquigglyUnderlineSpanPainter$stableprop_getter(): kotlin/Int // com.mikepenz.markdown.compose.extendedspans/com_mikepenz_markdown_compose_extendedspans_SquigglyUnderlineSpanPainter$stableprop_getter|com_mikepenz_markdown_compose_extendedspans_SquigglyUnderlineSpanPainter$stableprop_getter(){}[0]
final fun com.mikepenz.markdown.compose.extendedspans/rememberSquigglyUnderlineAnimator(kotlin.time/Duration, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): com.mikepenz.markdown.compose.extendedspans/SquigglyUnderlineAnimator // com.mikepenz.markdown.compose.extendedspans/rememberSquigglyUnderlineAnimator|rememberSquigglyUnderlineAnimator(kotlin.time.Duration;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.compose/LazyMarkdownSuccess(com.mikepenz.markdown.model/State.Success, com.mikepenz.markdown.compose.components/MarkdownComponents, androidx.compose.ui/Modifier?, androidx.compose.foundation.layout/PaddingValues?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int) // com.mikepenz.markdown.compose/LazyMarkdownSuccess|LazyMarkdownSuccess(com.mikepenz.markdown.model.State.Success;com.mikepenz.markdown.compose.components.MarkdownComponents;androidx.compose.ui.Modifier?;androidx.compose.foundation.layout.PaddingValues?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.compose/Markdown(com.mikepenz.markdown.model/MarkdownState, com.mikepenz.markdown.model/MarkdownColors, com.mikepenz.markdown.model/MarkdownTypography, androidx.compose.ui/Modifier?, com.mikepenz.markdown.model/MarkdownPadding?, com.mikepenz.markdown.model/MarkdownDimens?, com.mikepenz.markdown.model/ImageTransformer?, com.mikepenz.markdown.model/MarkdownAnnotator?, com.mikepenz.markdown.model/MarkdownExtendedSpans?, com.mikepenz.markdown.model/MarkdownInlineContent?, com.mikepenz.markdown.compose.components/MarkdownComponents?, com.mikepenz.markdown.model/MarkdownAnimations?, kotlin/Function3<androidx.compose.ui/Modifier, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>?, kotlin/Function5<com.mikepenz.markdown.model/State.Success, com.mikepenz.markdown.compose.components/MarkdownComponents, androidx.compose.ui/Modifier, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>?, kotlin/Function3<androidx.compose.ui/Modifier, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int, kotlin/Int) // com.mikepenz.markdown.compose/Markdown|Markdown(com.mikepenz.markdown.model.MarkdownState;com.mikepenz.markdown.model.MarkdownColors;com.mikepenz.markdown.model.MarkdownTypography;androidx.compose.ui.Modifier?;com.mikepenz.markdown.model.MarkdownPadding?;com.mikepenz.markdown.model.MarkdownDimens?;com.mikepenz.markdown.model.ImageTransformer?;com.mikepenz.markdown.model.MarkdownAnnotator?;com.mikepenz.markdown.model.MarkdownExtendedSpans?;com.mikepenz.markdown.model.MarkdownInlineContent?;com.mikepenz.markdown.compose.components.MarkdownComponents?;com.mikepenz.markdown.model.MarkdownAnimations?;kotlin.Function3<androidx.compose.ui.Modifier,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>?;kotlin.Function5<com.mikepenz.markdown.model.State.Success,com.mikepenz.markdown.compose.components.MarkdownComponents,androidx.compose.ui.Modifier,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>?;kotlin.Function3<androidx.compose.ui.Modifier,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.compose/Markdown(com.mikepenz.markdown.model/State, com.mikepenz.markdown.model/MarkdownColors, com.mikepenz.markdown.model/MarkdownTypography, androidx.compose.ui/Modifier?, com.mikepenz.markdown.model/MarkdownPadding?, com.mikepenz.markdown.model/MarkdownDimens?, com.mikepenz.markdown.model/ImageTransformer?, com.mikepenz.markdown.model/MarkdownAnnotator?, com.mikepenz.markdown.model/MarkdownExtendedSpans?, com.mikepenz.markdown.model/MarkdownInlineContent?, com.mikepenz.markdown.compose.components/MarkdownComponents?, com.mikepenz.markdown.model/MarkdownAnimations?, kotlin/Function3<androidx.compose.ui/Modifier, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>?, kotlin/Function5<com.mikepenz.markdown.model/State.Success, com.mikepenz.markdown.compose.components/MarkdownComponents, androidx.compose.ui/Modifier, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>?, kotlin/Function3<androidx.compose.ui/Modifier, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int, kotlin/Int) // com.mikepenz.markdown.compose/Markdown|Markdown(com.mikepenz.markdown.model.State;com.mikepenz.markdown.model.MarkdownColors;com.mikepenz.markdown.model.MarkdownTypography;androidx.compose.ui.Modifier?;com.mikepenz.markdown.model.MarkdownPadding?;com.mikepenz.markdown.model.MarkdownDimens?;com.mikepenz.markdown.model.ImageTransformer?;com.mikepenz.markdown.model.MarkdownAnnotator?;com.mikepenz.markdown.model.MarkdownExtendedSpans?;com.mikepenz.markdown.model.MarkdownInlineContent?;com.mikepenz.markdown.compose.components.MarkdownComponents?;com.mikepenz.markdown.model.MarkdownAnimations?;kotlin.Function3<androidx.compose.ui.Modifier,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>?;kotlin.Function5<com.mikepenz.markdown.model.State.Success,com.mikepenz.markdown.compose.components.MarkdownComponents,androidx.compose.ui.Modifier,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>?;kotlin.Function3<androidx.compose.ui.Modifier,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.compose/Markdown(kotlin/String, com.mikepenz.markdown.model/MarkdownColors, com.mikepenz.markdown.model/MarkdownTypography, androidx.compose.ui/Modifier?, com.mikepenz.markdown.model/MarkdownPadding?, com.mikepenz.markdown.model/MarkdownDimens?, org.intellij.markdown.flavours/MarkdownFlavourDescriptor?, org.intellij.markdown.parser/MarkdownParser?, com.mikepenz.markdown.model/ImageTransformer?, com.mikepenz.markdown.model/MarkdownAnnotator?, com.mikepenz.markdown.model/MarkdownExtendedSpans?, com.mikepenz.markdown.model/MarkdownInlineContent?, com.mikepenz.markdown.compose.components/MarkdownComponents?, com.mikepenz.markdown.model/MarkdownAnimations?, com.mikepenz.markdown.model/ReferenceLinkHandler?, kotlin/Function3<androidx.compose.ui/Modifier, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>?, kotlin/Function5<com.mikepenz.markdown.model/State.Success, com.mikepenz.markdown.compose.components/MarkdownComponents, androidx.compose.ui/Modifier, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>?, kotlin/Function3<androidx.compose.ui/Modifier, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int, kotlin/Int) // com.mikepenz.markdown.compose/Markdown|Markdown(kotlin.String;com.mikepenz.markdown.model.MarkdownColors;com.mikepenz.markdown.model.MarkdownTypography;androidx.compose.ui.Modifier?;com.mikepenz.markdown.model.MarkdownPadding?;com.mikepenz.markdown.model.MarkdownDimens?;org.intellij.markdown.flavours.MarkdownFlavourDescriptor?;org.intellij.markdown.parser.MarkdownParser?;com.mikepenz.markdown.model.ImageTransformer?;com.mikepenz.markdown.model.MarkdownAnnotator?;com.mikepenz.markdown.model.MarkdownExtendedSpans?;com.mikepenz.markdown.model.MarkdownInlineContent?;com.mikepenz.markdown.compose.components.MarkdownComponents?;com.mikepenz.markdown.model.MarkdownAnimations?;com.mikepenz.markdown.model.ReferenceLinkHandler?;kotlin.Function3<androidx.compose.ui.Modifier,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>?;kotlin.Function5<com.mikepenz.markdown.model.State.Success,com.mikepenz.markdown.compose.components.MarkdownComponents,androidx.compose.ui.Modifier,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>?;kotlin.Function3<androidx.compose.ui.Modifier,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.compose/MarkdownElement(org.intellij.markdown.ast/ASTNode, com.mikepenz.markdown.compose.components/MarkdownComponents, kotlin/String, kotlin/Boolean, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int) // com.mikepenz.markdown.compose/MarkdownElement|MarkdownElement(org.intellij.markdown.ast.ASTNode;com.mikepenz.markdown.compose.components.MarkdownComponents;kotlin.String;kotlin.Boolean;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.compose/MarkdownSuccess(com.mikepenz.markdown.model/State.Success, com.mikepenz.markdown.compose.components/MarkdownComponents, androidx.compose.ui/Modifier?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int) // com.mikepenz.markdown.compose/MarkdownSuccess|MarkdownSuccess(com.mikepenz.markdown.model.State.Success;com.mikepenz.markdown.compose.components.MarkdownComponents;androidx.compose.ui.Modifier?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.model/com_mikepenz_markdown_model_DefaultMarkdownAnimation$stableprop_getter(): kotlin/Int // com.mikepenz.markdown.model/com_mikepenz_markdown_model_DefaultMarkdownAnimation$stableprop_getter|com_mikepenz_markdown_model_DefaultMarkdownAnimation$stableprop_getter(){}[0]
final fun com.mikepenz.markdown.model/com_mikepenz_markdown_model_DefaultMarkdownAnnotator$stableprop_getter(): kotlin/Int // com.mikepenz.markdown.model/com_mikepenz_markdown_model_DefaultMarkdownAnnotator$stableprop_getter|com_mikepenz_markdown_model_DefaultMarkdownAnnotator$stableprop_getter(){}[0]
final fun com.mikepenz.markdown.model/com_mikepenz_markdown_model_DefaultMarkdownAnnotatorConfig$stableprop_getter(): kotlin/Int // com.mikepenz.markdown.model/com_mikepenz_markdown_model_DefaultMarkdownAnnotatorConfig$stableprop_getter|com_mikepenz_markdown_model_DefaultMarkdownAnnotatorConfig$stableprop_getter(){}[0]
final fun com.mikepenz.markdown.model/com_mikepenz_markdown_model_DefaultMarkdownColors$stableprop_getter(): kotlin/Int // com.mikepenz.markdown.model/com_mikepenz_markdown_model_DefaultMarkdownColors$stableprop_getter|com_mikepenz_markdown_model_DefaultMarkdownColors$stableprop_getter(){}[0]
final fun com.mikepenz.markdown.model/com_mikepenz_markdown_model_DefaultMarkdownExtendedSpans$stableprop_getter(): kotlin/Int // com.mikepenz.markdown.model/com_mikepenz_markdown_model_DefaultMarkdownExtendedSpans$stableprop_getter|com_mikepenz_markdown_model_DefaultMarkdownExtendedSpans$stableprop_getter(){}[0]
final fun com.mikepenz.markdown.model/com_mikepenz_markdown_model_DefaultMarkdownInlineContent$stableprop_getter(): kotlin/Int // com.mikepenz.markdown.model/com_mikepenz_markdown_model_DefaultMarkdownInlineContent$stableprop_getter|com_mikepenz_markdown_model_DefaultMarkdownInlineContent$stableprop_getter(){}[0]
final fun com.mikepenz.markdown.model/com_mikepenz_markdown_model_DefaultMarkdownTypography$stableprop_getter(): kotlin/Int // com.mikepenz.markdown.model/com_mikepenz_markdown_model_DefaultMarkdownTypography$stableprop_getter|com_mikepenz_markdown_model_DefaultMarkdownTypography$stableprop_getter(){}[0]
final fun com.mikepenz.markdown.model/com_mikepenz_markdown_model_ImageData$stableprop_getter(): kotlin/Int // com.mikepenz.markdown.model/com_mikepenz_markdown_model_ImageData$stableprop_getter|com_mikepenz_markdown_model_ImageData$stableprop_getter(){}[0]
final fun com.mikepenz.markdown.model/com_mikepenz_markdown_model_Input$stableprop_getter(): kotlin/Int // com.mikepenz.markdown.model/com_mikepenz_markdown_model_Input$stableprop_getter|com_mikepenz_markdown_model_Input$stableprop_getter(){}[0]
final fun com.mikepenz.markdown.model/com_mikepenz_markdown_model_MarkdownImageStateImpl$stableprop_getter(): kotlin/Int // com.mikepenz.markdown.model/com_mikepenz_markdown_model_MarkdownImageStateImpl$stableprop_getter|com_mikepenz_markdown_model_MarkdownImageStateImpl$stableprop_getter(){}[0]
final fun com.mikepenz.markdown.model/com_mikepenz_markdown_model_MarkdownStateImpl$stableprop_getter(): kotlin/Int // com.mikepenz.markdown.model/com_mikepenz_markdown_model_MarkdownStateImpl$stableprop_getter|com_mikepenz_markdown_model_MarkdownStateImpl$stableprop_getter(){}[0]
final fun com.mikepenz.markdown.model/com_mikepenz_markdown_model_NoOpImageTransformerImpl$stableprop_getter(): kotlin/Int // com.mikepenz.markdown.model/com_mikepenz_markdown_model_NoOpImageTransformerImpl$stableprop_getter|com_mikepenz_markdown_model_NoOpImageTransformerImpl$stableprop_getter(){}[0]
final fun com.mikepenz.markdown.model/com_mikepenz_markdown_model_PlaceholderConfig$stableprop_getter(): kotlin/Int // com.mikepenz.markdown.model/com_mikepenz_markdown_model_PlaceholderConfig$stableprop_getter|com_mikepenz_markdown_model_PlaceholderConfig$stableprop_getter(){}[0]
final fun com.mikepenz.markdown.model/com_mikepenz_markdown_model_ReferenceLinkHandlerImpl$stableprop_getter(): kotlin/Int // com.mikepenz.markdown.model/com_mikepenz_markdown_model_ReferenceLinkHandlerImpl$stableprop_getter|com_mikepenz_markdown_model_ReferenceLinkHandlerImpl$stableprop_getter(){}[0]
final fun com.mikepenz.markdown.model/com_mikepenz_markdown_model_State_Error$stableprop_getter(): kotlin/Int // com.mikepenz.markdown.model/com_mikepenz_markdown_model_State_Error$stableprop_getter|com_mikepenz_markdown_model_State_Error$stableprop_getter(){}[0]
final fun com.mikepenz.markdown.model/com_mikepenz_markdown_model_State_Loading$stableprop_getter(): kotlin/Int // com.mikepenz.markdown.model/com_mikepenz_markdown_model_State_Loading$stableprop_getter|com_mikepenz_markdown_model_State_Loading$stableprop_getter(){}[0]
final fun com.mikepenz.markdown.model/com_mikepenz_markdown_model_State_Success$stableprop_getter(): kotlin/Int // com.mikepenz.markdown.model/com_mikepenz_markdown_model_State_Success$stableprop_getter|com_mikepenz_markdown_model_State_Success$stableprop_getter(){}[0]
final fun com.mikepenz.markdown.model/markdownAnimations(kotlin/Function1<androidx.compose.ui/Modifier, androidx.compose.ui/Modifier>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): com.mikepenz.markdown.model/MarkdownAnimations // com.mikepenz.markdown.model/markdownAnimations|markdownAnimations(kotlin.Function1<androidx.compose.ui.Modifier,androidx.compose.ui.Modifier>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.model/markdownAnnotator(com.mikepenz.markdown.model/MarkdownAnnotatorConfig = ..., kotlin/Function3<androidx.compose.ui.text/AnnotatedString.Builder, kotlin/String, org.intellij.markdown.ast/ASTNode, kotlin/Boolean>? = ...): com.mikepenz.markdown.model/MarkdownAnnotator // com.mikepenz.markdown.model/markdownAnnotator|markdownAnnotator(com.mikepenz.markdown.model.MarkdownAnnotatorConfig;kotlin.Function3<androidx.compose.ui.text.AnnotatedString.Builder,kotlin.String,org.intellij.markdown.ast.ASTNode,kotlin.Boolean>?){}[0]
final fun com.mikepenz.markdown.model/markdownAnnotatorConfig(kotlin/Boolean = ...): com.mikepenz.markdown.model/MarkdownAnnotatorConfig // com.mikepenz.markdown.model/markdownAnnotatorConfig|markdownAnnotatorConfig(kotlin.Boolean){}[0]
final fun com.mikepenz.markdown.model/markdownDimens(androidx.compose.ui.unit/Dp, androidx.compose.ui.unit/Dp, androidx.compose.ui.unit/Dp, androidx.compose.ui.unit/Dp, androidx.compose.ui.unit/Dp, androidx.compose.ui.unit/Dp, androidx.compose.ui.unit/Dp, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): com.mikepenz.markdown.model/MarkdownDimens // com.mikepenz.markdown.model/markdownDimens|markdownDimens(androidx.compose.ui.unit.Dp;androidx.compose.ui.unit.Dp;androidx.compose.ui.unit.Dp;androidx.compose.ui.unit.Dp;androidx.compose.ui.unit.Dp;androidx.compose.ui.unit.Dp;androidx.compose.ui.unit.Dp;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.model/markdownExtendedSpans(kotlin/Function2<androidx.compose.runtime/Composer, kotlin/Int, com.mikepenz.markdown.compose.extendedspans/ExtendedSpans>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): com.mikepenz.markdown.model/MarkdownExtendedSpans // com.mikepenz.markdown.model/markdownExtendedSpans|markdownExtendedSpans(kotlin.Function2<androidx.compose.runtime.Composer,kotlin.Int,com.mikepenz.markdown.compose.extendedspans.ExtendedSpans>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.model/markdownInlineContent(kotlin.collections/Map<kotlin/String, androidx.compose.foundation.text/InlineTextContent>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): com.mikepenz.markdown.model/MarkdownInlineContent // com.mikepenz.markdown.model/markdownInlineContent|markdownInlineContent(kotlin.collections.Map<kotlin.String,androidx.compose.foundation.text.InlineTextContent>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.model/markdownPadding(androidx.compose.ui.unit/Dp, androidx.compose.ui.unit/Dp, androidx.compose.ui.unit/Dp, androidx.compose.ui.unit/Dp, androidx.compose.ui.unit/Dp?, androidx.compose.ui.unit/Dp, androidx.compose.foundation.layout/PaddingValues?, androidx.compose.foundation.layout/PaddingValues?, androidx.compose.foundation.layout/PaddingValues?, androidx.compose.foundation.layout/PaddingValues.Absolute?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): com.mikepenz.markdown.model/MarkdownPadding // com.mikepenz.markdown.model/markdownPadding|markdownPadding(androidx.compose.ui.unit.Dp;androidx.compose.ui.unit.Dp;androidx.compose.ui.unit.Dp;androidx.compose.ui.unit.Dp;androidx.compose.ui.unit.Dp?;androidx.compose.ui.unit.Dp;androidx.compose.foundation.layout.PaddingValues?;androidx.compose.foundation.layout.PaddingValues?;androidx.compose.foundation.layout.PaddingValues?;androidx.compose.foundation.layout.PaddingValues.Absolute?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.model/parseMarkdownFlow(kotlin/String, kotlin/Boolean = ..., org.intellij.markdown.flavours/MarkdownFlavourDescriptor = ..., org.intellij.markdown.parser/MarkdownParser = ..., com.mikepenz.markdown.model/ReferenceLinkHandler = ...): kotlinx.coroutines.flow/Flow<com.mikepenz.markdown.model/State> // com.mikepenz.markdown.model/parseMarkdownFlow|parseMarkdownFlow(kotlin.String;kotlin.Boolean;org.intellij.markdown.flavours.MarkdownFlavourDescriptor;org.intellij.markdown.parser.MarkdownParser;com.mikepenz.markdown.model.ReferenceLinkHandler){}[0]
final fun com.mikepenz.markdown.model/rememberMarkdownState(kotlin/Boolean, org.intellij.markdown.flavours/MarkdownFlavourDescriptor?, org.intellij.markdown.parser/MarkdownParser?, com.mikepenz.markdown.model/ReferenceLinkHandler?, kotlin.coroutines/SuspendFunction0<kotlin/String>, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): com.mikepenz.markdown.model/MarkdownState // com.mikepenz.markdown.model/rememberMarkdownState|rememberMarkdownState(kotlin.Boolean;org.intellij.markdown.flavours.MarkdownFlavourDescriptor?;org.intellij.markdown.parser.MarkdownParser?;com.mikepenz.markdown.model.ReferenceLinkHandler?;kotlin.coroutines.SuspendFunction0<kotlin.String>;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.model/rememberMarkdownState(kotlin/String, kotlin/Boolean, org.intellij.markdown.flavours/MarkdownFlavourDescriptor?, org.intellij.markdown.parser/MarkdownParser?, com.mikepenz.markdown.model/ReferenceLinkHandler?, kotlin/Boolean, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): com.mikepenz.markdown.model/MarkdownState // com.mikepenz.markdown.model/rememberMarkdownState|rememberMarkdownState(kotlin.String;kotlin.Boolean;org.intellij.markdown.flavours.MarkdownFlavourDescriptor?;org.intellij.markdown.parser.MarkdownParser?;com.mikepenz.markdown.model.ReferenceLinkHandler?;kotlin.Boolean;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.markdown.utils/com_mikepenz_markdown_utils_EntityConverter$stableprop_getter(): kotlin/Int // com.mikepenz.markdown.utils/com_mikepenz_markdown_utils_EntityConverter$stableprop_getter|com_mikepenz_markdown_utils_EntityConverter$stableprop_getter(){}[0]
final fun com.mikepenz.markdown.utils/com_mikepenz_markdown_utils_MarkdownLogger$stableprop_getter(): kotlin/Int // com.mikepenz.markdown.utils/com_mikepenz_markdown_utils_MarkdownLogger$stableprop_getter|com_mikepenz_markdown_utils_MarkdownLogger$stableprop_getter(){}[0]
final inline fun com.mikepenz.markdown.utils/LogCompositions(crossinline kotlin/Function0<kotlin/String>, androidx.compose.runtime/Composer?, kotlin/Int) // com.mikepenz.markdown.utils/LogCompositions|LogCompositions(kotlin.Function0<kotlin.String>;androidx.compose.runtime.Composer?;kotlin.Int){}[0]
